require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');
const { LRUCache } = require('lru-cache');

// Import optimizations
const {
  messageCache,
  processedMessages,
  metrics,
  dbCircuitBreaker,
  batchProcessor,
  rateLimiter,
  OPTIMIZED_POLLING_CONFIG,
  processMessageOptimized,
  cleanup,
  initializeOptimizations,
  setSupabaseClient
} = require('./optimizations');

// Environment variables - Production values
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8482465404:AAEXHvQ4s2lE3cPSRk5ZErG4w_ybvZjyEHA';
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://vdsoduzvmnuyhwbbnkwi.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZkc29kdXp2bW51eWh3YmJua3dpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA2MTczNDUsImV4cCI6MjA2NjE5MzM0NX0.stWTGS03eY8IdftKpeylOHURDAkmf6LiKas4_Jdd5cw';
const GROUP_ID = process.env.TELEGRAM_GROUP_ID || '-1001534528304';
const ADMIN_GROUP_ID = process.env.TELEGRAM_ADMIN_GROUP_ID || '-1002879152667'; // Admin/Technical logs group
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://bblip.io';

// Rate limiting configuration (optimized)
const RATE_LIMIT_DELAY = 50; // 50ms between messages (faster)
const RATE_LIMIT_RETRY_DELAY = 2000; // 2 seconds when rate limited

// Anti-bot protection configuration (Rose bot style)
const ANTI_BOT_CONFIG = {
  MIN_MESSAGE_INTERVAL: 1000, // 1 second minimum between messages
  MAX_MESSAGES_PER_MINUTE: 10, // Max 10 messages per minute per user
  MAX_MESSAGES_PER_HOUR: 100, // Max 100 messages per hour per user
  SPAM_DETECTION_WINDOW: 60000, // 1 minute window for spam detection
  SUSPICIOUS_PATTERNS: [
    /(.)\1{4,}/, // Same character repeated 5+ times
    /(.)\1{3,}(.)\2{3,}/, // Two different characters repeated 4+ times each
    /(.)\1{2,}(.)\2{2,}(.)\3{2,}/, // Three different characters repeated 3+ times each
    /^[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]{5,}$/, // Only special characters
    /^[0-9]{10,}$/, // Only numbers (10+ digits)
    /^[a-zA-Z]{20,}$/, // Only letters (20+ characters)
    /(.)\1{2,}(.)\2{2,}(.)\3{2,}(.)\4{2,}/, // Four different characters repeated 3+ times each
  ],
  WARNING_THRESHOLD: 2, // 2 warnings before restriction
  RESTRICT_DURATION: 300, // 5 minutes restriction duration
  BAN_DURATION: 3600, // 1 hour ban duration for severe violations
  XP_PENALTY: 5, // 5 XP penalty for spam
  USE_TELEGRAM_RESTRICTIONS: true, // Use Telegram's native restrictions
  AUTO_UNRESTRICT: true // Automatically unrestrict after duration
};

// Optimized polling configuration
const POLLING_INTERVAL = OPTIMIZED_POLLING_CONFIG.interval; // 500ms (was 100ms)
const POLLING_LIMIT = OPTIMIZED_POLLING_CONFIG.limit; // 50 updates (was 100)
const BATCH_INTERVAL = 30 * 1000; // 30 seconds (was 60 seconds)

// Rate limiting queue (optimized)
const messageQueue = [];
let isProcessingQueue = false;

// Performance monitoring (optimized)
let messageCount = 0;
let lastMessageTime = Date.now();
const PERFORMANCE_LOG_INTERVAL = 100; // Log every 100 messages

// Add uptime tracking
const botStartTime = Date.now();
let totalMessagesProcessed = 0;
let totalXPAwarded = 0;

// Enhanced performance monitoring
function logPerformanceStats() {
  const uptime = Date.now() - botStartTime;
  const uptimeHours = Math.floor(uptime / (1000 * 60 * 60));
  const uptimeMinutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));
  
  console.log(`üìä Bot Performance Stats:`);
  console.log(`  - Uptime: ${uptimeHours}h ${uptimeMinutes}m`);
  console.log(`  - Total Messages: ${totalMessagesProcessed}`);
  console.log(`  - Total XP Awarded: ${totalXPAwarded}`);
  console.log(`  - Cache Size: ${messageCache.size} users`);
  console.log(`  - Processed Messages: ${processedMessages.size}`);
  console.log(`  - Queue Size: ${messageQueue.length}`);
  console.log(`  - Active Users: ${userMessageHistory.size}`);
  console.log(`  - Memory Usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
}

// Anti-bot tracking (optimized with LRU cache)
const userMessageHistory = new LRUCache({
  max: 1000,
  maxAge: 1000 * 60 * 30, // 30 minutes
  updateAgeOnGet: true
});

const spamDetections = new LRUCache({
  max: 500,
  maxAge: 1000 * 60 * 60, // 1 hour
  updateAgeOnGet: true
});

// Global anti-spam data (optimized)
global.userSpamData = global.userSpamData || new LRUCache({
  max: 1000,
  maxAge: 1000 * 60 * 30, // 30 minutes
  updateAgeOnGet: true
});

// Global variables for compatibility
let batchProcessingInterval = null;
let xpUpdateQueue = new Map();

console.log('üåê [BOT] Environment Configuration:');
console.log('  - BOT_TOKEN:', BOT_TOKEN ? '‚úÖ Set' : '‚ùå Missing');
console.log('  - SUPABASE_URL:', SUPABASE_URL);
console.log('  - GROUP_ID:', GROUP_ID);
console.log('  - WEB_APP_URL:', WEB_APP_URL);
console.log('  - NODE_ENV:', process.env.NODE_ENV || 'development');

// Initialize bot with optimized polling settings
const bot = new TelegramBot(BOT_TOKEN, { 
  polling: {
    interval: POLLING_INTERVAL,
    limit: POLLING_LIMIT,
    retryTimeout: 1000,
    params: {
      timeout: 5 // 5 second timeout using new params format
    },
    autoStart: false // We'll start manually
  }
});

// Initialize Supabase with connection pooling
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  db: {
    schema: 'public',
    pool: {
      min: 2,
      max: 10,
      idleTimeoutMillis: 30000
    }
  },
  auth: {
    persistSession: false // Bot doesn't need session persistence
  },
  global: {
    headers: {
      'X-Client-Info': 'telegram-bot-optimized'
    }
  }
});

// Initialize optimizations
initializeOptimizations();

// Set supabase client for optimizations
setSupabaseClient(supabase);

// Start periodic performance logging (every 5 minutes)
setInterval(() => {
  logPerformanceStats();
}, 5 * 60 * 1000);

console.log('ü§ñ [BOT] Bot initialized successfully');
console.log('üìä [BOT] Supabase client initialized with connection pooling');
console.log('üöÄ [BOT] Optimizations initialized');
console.log('üìà [BOT] Performance monitoring enabled');
console.log('üîç [BOT] Ready to listen for messages...');

// XP calculation constants
const XP_REWARDS = { 
  MESSAGE: 1, 
  DAILY_ACTIVE: 5,
  WEEKLY_STREAK: 10
};

// Level thresholds
const LEVELS = [
  { name: 'Bronze', minXP: 0, maxXP: 250, reward: 1 },
  { name: 'Silver', minXP: 251, maxXP: 500, reward: 2 },
  { name: 'Gold', minXP: 501, maxXP: 1000, reward: 3 },
  { name: 'Platinum', minXP: 1001, maxXP: 2000, reward: 4 },
  { name: 'Diamond', minXP: 2001, maxXP: 999999, reward: 5 }
];

// Welcome message auto-delete configuration
const WELCOME_MESSAGE_DELETE_DELAY = 30 * 1000; // 30 seconds (30,000ms)
const WELCOME_MESSAGE_DELETE_ENABLED = true; // Enable/disable auto-delete

// Referral system configuration
const REFERRAL_XP_REWARD = 25; // XP for successful referral (daha √∂nce 50 idi)
const REFERRAL_BBLP_REWARD = 5; // BBLP tokens for successful referral
const REFERRAL_SYSTEM_ENABLED = true; // Enable/disable referral system

// Global referral tracking
const pendingReferrals = new Map(); // userId -> referralCode
const referralLinkUsage = new Map(); // referralCode -> usageCount

// Referral system functions
async function generateReferralLink(userId) {
  try {
    console.log(`üîó Getting referral link for user ${userId}`);
    // First check if user already has an active referral link
    const { data: existingLink, error: checkError } = await supabase
      .from('telegram_referral_links')
      .select('invite_link, referral_code')
      .eq('telegram_id', userId)
      .eq('is_active', true)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
    if (existingLink && !checkError) {
      // Legacy referral code d√ºzeltme bloƒüu kaldƒ±rƒ±ldƒ±, doƒürudan invite_link d√∂nd√ºr√ºl√ºyor
      console.log(`‚úÖ Found existing referral link for user ${userId}: ${existingLink.invite_link}`);
      return existingLink.invite_link;
    }
    // Create new referral link if none exists
    console.log(`üîó Creating new referral link for user ${userId}`);
    // Create unique referral code (always with underscore)
    const referralCode = `REF${userId}_${Date.now()}`;
    // Create bot referral link (kullanƒ±cƒ±yƒ± √∂nce bota y√∂nlendir)
    const botUsername = 'denemebot45bot'; // Bot'un username'i
    const botReferralLink = `https://t.me/${botUsername}?start=${referralCode}`;
    // Store the referral link in database for tracking
    const { data: referralLink, error } = await supabase
      .from('telegram_referral_links')
      .insert([{
        telegram_id: userId,
        invite_link: botReferralLink,
        referral_code: referralCode,
        is_active: true,
        usage_count: 0,
        max_usage: 100, // Allow up to 100 referrals per user
        expires_at: new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)).toISOString() // 30 days
      }])
      .select()
      .single();
    if (error) {
      console.error(`‚ùå Error storing referral link:`, error);
      return null;
    }
    console.log(`‚úÖ New bot referral link generated for user ${userId}: ${botReferralLink}`);
    return botReferralLink;
  } catch (error) {
    console.error(`‚ùå Error generating referral link for user ${userId}:`, error);
    return null;
  }
}

async function processReferral(referrerId, referredId, referralCode = null) {
  try {
    console.log(`üéØ Processing referral: ${referrerId} -> ${referredId} with code: ${referralCode}`);
    // Fallback: If referralCode is missing underscore, try to fix it
    let codeToUse = referralCode;
    if (referralCode && !referralCode.includes('_')) {
      codeToUse = referralCode.replace(/^REF(\d+)/, (m, p1) => `REF${p1}_${Date.now()}`);
      console.warn(`‚ö†Ô∏è Legacy referral code without underscore detected in processReferral. Fixed: ${codeToUse}`);
    }
    // Check if user already joined via referral
    const { data: existingTracking, error: checkError } = await supabase
      .from('telegram_referral_tracking')
      .select('*')
      .eq('telegram_id', referredId)
      .single();
    if (existingTracking) {
      console.log(`‚ö†Ô∏è User ${referredId} already joined via referral: ${existingTracking.referrer_id}`);
      return false;
    }
    // Check if referred user is already registered in telegram_users
    const { data: existingUser, error: userCheckError } = await supabase
      .from('telegram_users')
      .select('*')
      .eq('telegram_id', referredId)
      .single();
    if (existingUser) {
      console.log(`‚ö†Ô∏è User ${referredId} is already registered, ignoring referral`);
      return false; // Don't process referral for existing users
    }
    // User is new (not registered), give XP reward
    console.log(`üéâ User ${referredId} is new, giving XP reward to referrer ${referrerId}`);
    // Create referral tracking record
    const { data: tracking, error: insertError } = await supabase
      .from('telegram_referral_tracking')
      .insert([{
        telegram_id: referredId,
        referrer_id: referrerId,
        referral_code: codeToUse || `REF${referrerId}_${Date.now()}`,
        xp_rewarded: REFERRAL_XP_REWARD
      }])
      .select()
      .single();
    if (insertError) {
      console.error(`‚ùå Error creating referral tracking record:`, insertError);
      return false;
    }
    console.log(`‚úÖ Referral tracking record created: ${tracking.id}`);
    // Award XP to referrer (only for new users)
    await awardReferralXP(referrerId, REFERRAL_XP_REWARD);
    // Award BBLP to referrer (if connected to wallet)
    await awardReferralBBLP(referrerId, REFERRAL_BBLP_REWARD);
    // Update referrer's referral count
    await updateReferralCount(referrerId);
    return true;
  } catch (error) {
    console.error(`‚ùå Error processing referral:`, error);
    return false;
  }
}

async function awardReferralXP(telegramId, xpAmount) {
  try {
    console.log(`üéÅ Awarding ${xpAmount} XP to referrer ${telegramId}`);
    
    // Get current activity
    const { data: activity, error } = await supabase
      .from('telegram_activities')
      .select('total_xp')
      .eq('telegram_id', telegramId)
      .single();
    
    if (error) {
      console.error(`‚ùå Error fetching activity for referral XP:`, error);
      return;
    }
    
    const newTotalXP = (activity?.total_xp || 0) + xpAmount;
    
    // Update XP
    await supabase
      .from('telegram_activities')
      .update({ total_xp: newTotalXP })
      .eq('telegram_id', telegramId);
    
    console.log(`‚úÖ Referral XP awarded: ${telegramId} now has ${newTotalXP} XP`);
    
    // Send congratulation message to referrer
    try {
      // Get or create referral link for this user
      // const referralLink = await generateReferralLink(telegramId); // no longer needed for button
      const congratulationMessage = `üéâ *Congratulations\!* üéâ\n\nüë• *You successfully referred a new user\!*\n\nüéÅ *Rewards Earned:*\n‚Ä¢ XP: \\+${xpAmount}\n‚Ä¢ Points: \\+${REFERRAL_BBLP_REWARD}\n\nüìä *Your New Stats:*\n‚Ä¢ Total XP: ${newTotalXP.toLocaleString()}\n‚Ä¢ Level: ${calculateLevel(newTotalXP)} \\(${getLevelName(calculateLevel(newTotalXP))}\\)\n\nüíé *Keep sharing your referral link to earn more rewards\!*\n\nüöÄ *Next Goal:*\nShare your link with more friends and earn even more XP\!`;
        await bot.sendMessage(telegramId, congratulationMessage, { 
          parse_mode: 'Markdown'
        });
        console.log(`‚úÖ Congratulation message sent to referrer ${telegramId}`);
      } catch (error) {
        console.error(`‚ùå Error sending congratulation message:`, error);
      }
    
  } catch (error) {
    console.error(`‚ùå Error awarding referral XP:`, error);
  }
}

async function awardReferralBBLP(telegramId, bblpAmount) {
  try {
    console.log(`üéÅ Awarding ${bblpAmount} Points to referrer ${telegramId}`);
    
    // Get user's wallet connection
    const { data: telegramUser, error } = await supabase
      .from('telegram_users')
      .select('user_id')
      .eq('telegram_id', telegramId)
      .single();
    
    if (error || !telegramUser) {
      console.log(`‚ö†Ô∏è User ${telegramId} not connected to wallet, Points reward pending`);
      return;
    }
    
    // Create BBLP reward record
    await supabase
      .from('telegram_rewards')
      .insert([{
        user_id: telegramUser.user_id,
        reward_type: 'referral',
        bblp_amount: bblpAmount.toString(),
        xp_earned: 0,
        claimed: false
      }]);
    
    console.log(`‚úÖ Referral Points reward recorded for user ${telegramId}`);
    
  } catch (error) {
    console.error(`‚ùå Error awarding referral Points:`, error);
  }
}

async function updateReferralCount(telegramId) {
  try {
    // Get current referral count from tracking table
    const { count: currentCount, error: countError } = await supabase
      .from('telegram_referral_tracking')
      .select('*', { count: 'exact', head: true })
      .eq('referrer_id', telegramId);
    
    if (countError) {
      console.error(`‚ùå Error counting referrals:`, countError);
      return;
    }
    
    // Update referral count in telegram_activities
    await supabase
      .from('telegram_activities')
      .update({ referral_count: currentCount })
      .eq('telegram_id', telegramId);
    
    console.log(`‚úÖ Referral count updated for ${telegramId}: ${currentCount}`);
    
  } catch (error) {
    console.error(`‚ùå Error updating referral count:`, error);
  }
}

// Basit referral tracking - sadece duplicate kontrol√º
async function checkReferralDuplicate(telegramId) {
  try {
    const { data: existing, error } = await supabase
      .from('telegram_referral_tracking')
      .select('telegram_id')
      .eq('telegram_id', telegramId)
      .single();
    
    if (error && error.code !== 'PGRST116') {
      console.error(`‚ùå Error checking referral duplicate:`, error);
      return false; // Allow if error
    }
    
    return !!existing; // true if exists, false if not
  } catch (error) {
    console.error(`‚ùå Error checking referral duplicate:`, error);
    return false; // Allow if error
  }
}

async function sendAccountConnectedMessage(telegramId, username) {
  try {
    console.log(`üéâ Sending account connected message to user ${telegramId}`);
    
    // Get or create referral link for newly connected user
    const referralLink = await generateReferralLink(telegramId);
    
    const message = `üéâ *Account Successfully Connected\!* üéâ

üëã *Hello @${username}\!* Welcome to BBLIP Community\!

‚úÖ *Status: Connected*
üîó *Wallet: Connected*
üíº *Referral System: Active*

üéØ *What You Can Do Now:*
‚Ä¢ Send messages to earn XP
‚Ä¢ Level up for better rewards
‚Ä¢ Claim daily Points tokens
‚Ä¢ Share your referral link
‚Ä¢ Climb the leaderboard

‚ö° *Quick Commands:*
/my\_xp - Check your progress
/leaderboard - See top players
/help - Show all commands

üöÄ *Start earning XP by chatting\!*
Your messages will earn you XP automatically\!

üîó *Connect wallet to get your referral link and earn Points rewards\!*`;

    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üîó Share My Referral Link',
          url: referralLink
        }],
        [{
          text: 'üíº Connect Wallet',
          url: `${WEB_APP_URL}/telegram`
        }],
        [{
          text: 'üìä My XP Stats',
          callback_data: 'my_xp'
        }]
      ]
    };

    await bot.sendMessage(telegramId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
    console.log(`‚úÖ Account connected message sent to user ${telegramId}`);
  } catch (error) {
    console.error(`‚ùå Error sending account connected message:`, error);
  }
}



// Welcome message handler function
async function handleNewMember(chatId, newMember) {
  const userId = newMember.id;
  const username = newMember.username || newMember.first_name;
  const isBot = newMember.is_bot;
  
  console.log(`üëã Processing new member:`);
  console.log(`  - Chat ID: ${chatId}`);
  console.log(`  - User ID: ${userId}`);
  console.log(`  - Username: @${username}`);
  console.log(`  - Is Bot: ${isBot}`);
  
  // Skip bots
  if (isBot) {
    console.log(`ü§ñ Skipping bot: @${username}`);
    return;
  }
  
  try {
    // Check if user is in our database
    const { data: telegramUser, error } = await supabase
      .from('telegram_users')
      .select('*')
      .eq('telegram_id', userId)
      .single();
    
    console.log(`üìä Database query result for new member:`);
    console.log(`  - User found: ${!!telegramUser}`);
    console.log(`  - Error: ${error ? JSON.stringify(error) : 'None'}`);
    
    // Check for pending referral code (from /start command)
    const pendingReferralCode = pendingReferrals.get(userId);
    let referralProcessed = false;
    
    if (REFERRAL_SYSTEM_ENABLED && pendingReferralCode) {
      try {
        console.log(`üéØ Processing pending referral for new user ${userId} with code: ${pendingReferralCode}`);
        
        // Extract referrer ID from referral code (format: REF123456_1234567890)
        const referrerIdMatch = pendingReferralCode.match(/^REF(\d+)_/);
        if (referrerIdMatch) {
          const referrerId = parseInt(referrerIdMatch[1]);
          
          // Don't allow self-referral
          if (referrerId !== userId) {
            console.log(`üéØ Processing referral: ${referrerId} -> ${userId}`);
            const referralSuccess = await processReferral(referrerId, userId);
            
            if (referralSuccess) {
              console.log(`‚úÖ Referral processed successfully for new user ${userId}`);
              referralProcessed = true;
            } else {
              console.log(`‚ö†Ô∏è Referral processing failed for new user ${userId}`);
            }
          } else {
            console.log(`‚ö†Ô∏è Self-referral attempted by new user ${userId}`);
          }
        } else {
          console.log(`‚ö†Ô∏è Invalid referral code format: ${pendingReferralCode}`);
        }
        
        // Remove the referral code from pending list
        pendingReferrals.delete(userId);
      } catch (error) {
        console.error(`‚ùå Error processing referral for new user:`, error);
      }
    }
    
    if (error || !telegramUser) {
      // New user - send welcome message
      const message = `üéâ Welcome to BBLIP!

Hi @${username}, glad to have you in our global crypto community!

What's next?
- üöÄ Start earning rewards by chatting and engaging.
- üí≥ Connect your wallet to unlock daily Points token rewards.
- üèÜ Climb the leaderboard and win exclusive prizes.

Quick Start:
1. Connect your wallet below
2. Start chatting to earn XP & Points
3. Use /help for all commands

Your journey to smarter crypto rewards starts now!`;
      
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üîó Connect Wallet',
            url: `${WEB_APP_URL}/social-connections`
          }
        ]]
      };
      
      console.log(`üì§ Sending welcome message to new member...`);
      const sentMessage = await sendMessageWithRateLimit(chatId, message, {
        reply_markup: keyboard
      });
      console.log(`‚úÖ Welcome message sent to new member`);
      
      // Auto-delete welcome message after delay
      if (WELCOME_MESSAGE_DELETE_ENABLED && sentMessage && sentMessage.message_id) {
        setTimeout(async () => {
          try {
            await bot.deleteMessage(chatId, sentMessage.message_id);
            console.log(`üóëÔ∏è Welcome message auto-deleted for new member @${username} (after ${WELCOME_MESSAGE_DELETE_DELAY/1000}s)`);
          } catch (error) {
            console.log(`‚ö†Ô∏è Could not auto-delete welcome message: ${error.message}`);
          }
        }, WELCOME_MESSAGE_DELETE_DELAY);
      }
      
      // Send admin log (no auto-delete for admin logs)
      await sendAdminLog(`üëã New member joined: @${username} (ID: ${userId}) - Not connected to wallet yet${referralProcessed ? ' - Referral processed' : ''}`);
      
      // Send private connection message to user
      try {
        const privateMessage = `üîó **Account Connection Required** üîó

üëã **Hello @${username}!** Welcome to BBLIP Community!

üìä **Current Status:** ‚ùå Not Connected
üí¨ **Chat Activity:** ‚ùå No XP Rewards
üéÅ **Daily Rewards:** ‚ùå Not Available

‚ö†Ô∏è **Important:** You need to connect your wallet to start earning XP from chat activity!

üéØ **Quick Connection Steps:**
1Ô∏è‚É£ Visit: ${WEB_APP_URL}/telegram
2Ô∏è‚É£ Connect your wallet (MetaMask, etc.)
3Ô∏è‚É£ Click "Connect Telegram" button
4Ô∏è‚É£ Use Telegram Login Widget

üíé **What You'll Get After Connection:**
‚Ä¢ Real-time XP from messages
‚Ä¢ Daily Points token rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards
‚Ä¢ Anti-bot protection

‚ö° **Commands Available After Connection:**
/my_xp - Check your progress
/leaderboard - See top players
/help - Show all commands

üöÄ **Ready to start earning?**
Click the button below to connect your account!`;

        // Send private message with inline keyboard
        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üîó Connect My Account',
              url: `${WEB_APP_URL}/telegram`
            }
          ]]
        };

        await bot.sendMessage(userId, privateMessage, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
        
        console.log(`üì± Private connection message sent to @${username} (${userId})`);
        
        // Auto-delete private message after 5 minutes
        setTimeout(async () => {
          try {
            // Note: We can't delete private messages sent to users
            // But we can log that the message was sent
            console.log(`‚è∞ Private connection message timeout for @${username} (${userId})`);
          } catch (error) {
            console.log(`‚ö†Ô∏è Could not handle private message timeout: ${error.message}`);
          }
        }, 5 * 60 * 1000); // 5 minutes
        
      } catch (error) {
        console.error(`‚ùå Error sending private connection message to @${username}:`, error);
        // If private message fails, send a public reminder
        const publicReminder = `üëã @${username} Welcome! Please check your private messages from me to connect your account and start earning XP!`;
        await sendMessageWithRateLimit(chatId, publicReminder);
      }
      
    } else {
      // Returning user - send welcome back message
      const message = `üéâ **Welcome Back to BBLIP!** üéâ

üëã **Hello @${username}!** Great to see you again!

‚úÖ **Status: Connected**
üíº Wallet: ${String(telegramUser.user_id).slice(0, 6)}...${String(telegramUser.user_id).slice(-4)}

üéØ **Your Journey Continues:**
‚Ä¢ Send messages to earn XP
‚Ä¢ Level up for better rewards
‚Ä¢ Claim daily Points tokens
‚Ä¢ Climb the leaderboard

‚ö° **Quick Commands:**
/my\\_xp - Check your progress
/leaderboard - See top players
/help - Show all commands

üöÄ **Keep chatting and earning!**
Your messages will earn you XP automatically!`;
      
      console.log(`üì§ Sending welcome back message to returning member...`);
      const sentMessage = await sendMessageWithRateLimit(chatId, message);
      console.log(`‚úÖ Welcome back message sent to returning member`);
      
      // Auto-delete welcome back message after delay
      if (WELCOME_MESSAGE_DELETE_ENABLED && sentMessage && sentMessage.message_id) {
        setTimeout(async () => {
          try {
            await bot.deleteMessage(chatId, sentMessage.message_id);
            console.log(`üóëÔ∏è Welcome back message auto-deleted for returning member @${username} (after ${WELCOME_MESSAGE_DELETE_DELAY/1000}s)`);
          } catch (error) {
            console.log(`‚ö†Ô∏è Could not auto-delete welcome back message: ${error.message}`);
          }
        }, WELCOME_MESSAGE_DELETE_DELAY);
      }
      
      // Send admin log (no auto-delete for admin logs)
      await sendAdminLog(`üëã Returning member joined: @${username} (ID: ${userId}) - Connected to wallet: ${String(telegramUser.user_id).slice(0, 6)}...${String(telegramUser.user_id).slice(-4)}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error handling new member:', error);
    await sendAdminError(error, `New member join - User: @${username} (${userId})`);
  }
}

// Bot commands
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  // Prevent /start in group chats
  if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
    return;
  }
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;
  const args = msg.text.split(' ');
  
  // Check for referral code in start command
  let referralCode = null;
  if (args.length > 1) {
    referralCode = args[1];
    console.log(`üîó Referral code detected in /start: ${referralCode}`);
    
    // Store referral code for this user
    pendingReferrals.set(userId, referralCode);
    console.log(`üìù Stored referral code ${referralCode} for user ${userId}`);
    
    // Track referral link usage
    const currentUsage = referralLinkUsage.get(referralCode) || 0;
    referralLinkUsage.set(referralCode, currentUsage + 1);
    console.log(`üìä Referral link usage for ${referralCode}: ${currentUsage + 1}`);
  }
  
  console.log(`üöÄ /start command received:`);
  console.log(`  - Chat ID: ${chatId}`);
  console.log(`  - User ID: ${userId}`);
  console.log(`  - Username: @${username}`);
  console.log(`  - Args: ${JSON.stringify(args)}`);
  console.log(`  - Referral code: ${referralCode || 'None'}`);
  
  try {
    console.log(`üîç Checking if user ${userId} exists in database...`);
    
    // Check if user is in our database
    const { data: telegramUser, error } = await supabase
      .from('telegram_users')
      .select('*')
      .eq('telegram_id', userId)
      .single();
    
    console.log(`üìä Database query result:`);
    console.log(`  - User found: ${!!telegramUser}`);
    console.log(`  - Error: ${error ? JSON.stringify(error) : 'None'}`);
    console.log(`  - User data: ${telegramUser ? JSON.stringify(telegramUser) : 'Not found'}`);
    
    if (error || !telegramUser) {
      console.log(`‚ùå User not connected, sending connection instructions...`);
      
      // Process referral even if user is not connected yet
      if (REFERRAL_SYSTEM_ENABLED && referralCode) {
        try {
          console.log(`üéØ Processing referral for unconnected user ${userId} with code: ${referralCode}`);
          
          // Check if user already used referral
          const isDuplicate = await checkReferralDuplicate(userId);
          if (isDuplicate) {
            console.log(`‚ö†Ô∏è User ${userId} already used referral before`);
            return;
          }
          
          // Extract referrer ID from referral code (format: REF123456_1234567890)
          const referrerIdMatch = referralCode.match(/^REF(\d+)_/);
          if (referrerIdMatch) {
            const referrerId = parseInt(referrerIdMatch[1]);
            
            // Don't allow self-referral
            if (referrerId !== userId) {
              console.log(`üéØ Processing referral: ${referrerId} -> ${userId}`);
              const referralSuccess = await processReferral(referrerId, userId, referralCode);
              
              if (referralSuccess) {
                console.log(`‚úÖ Referral processed successfully for unconnected user ${userId}`);
                
                // Only show success message for new users
                const successMessage = `üéâ *Referral Success\!* üéâ

üëã *Hello @${username}\\!* Welcome to BBLIP Community\!

‚úÖ *Referral Processed:*
‚Ä¢ You joined using a referral link
‚Ä¢ The referrer has been rewarded with XP
‚Ä¢ Your referral is now tracked

üöÄ *Next Steps:*
1Ô∏è‚É£ Join our main community group
2Ô∏è‚É£ Connect your wallet to start earning XP
3Ô∏è‚É£ Start chatting to earn rewards

üíé *What You'll Get:*
‚Ä¢ Real\-time XP from messages
‚Ä¢ Daily Points token rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards

üîó *Join Our Community:*`;

                const keyboard = {
                  inline_keyboard: [
                    [{
                      text: 'üöÄ Join BBLIP Community',
                      url: `https://t.me/+XqnFyuXylP01MjI0`
                    }],
                    [{
                      text: 'üîó Connect Wallet',
                      url: `${WEB_APP_URL}/telegram`
                    }]
                  ]
                };

                await bot.sendMessage(userId, successMessage, {
                  parse_mode: 'Markdown',
                  reply_markup: keyboard
                });
                
                console.log(`‚úÖ Referral success message sent to unconnected user ${userId}`);
                return; // Don't send the regular connection message
                
              } else {
                console.log(`‚ö†Ô∏è Referral processing failed for unconnected user ${userId}`);
              }
            } else {
              console.log(`‚ö†Ô∏è Self-referral attempted by unconnected user ${userId}`);
            }
          } else {
            console.log(`‚ö†Ô∏è Invalid referral code format: ${referralCode}`);
          }
        } catch (error) {
          console.error(`‚ùå Error processing referral for unconnected user:`, error);
        }
      }
      
      if (args[1] === 'connect') {
        const message = `üîó **Manual Connection Mode** üîó

üëã **Hello @${username}!** Let's get you connected to start earning!

üìã **Your Details:**
üÜî Telegram ID: ${userId}
üë§ Username: @${username}

üéØ **Connection Steps:**
1Ô∏è‚É£ Visit: ${WEB_APP_URL}/telegram
2Ô∏è‚É£ Connect your wallet
3Ô∏è‚É£ Click "Connect Telegram" button
4Ô∏è‚É£ Use the Telegram Login Widget

üíé **What You'll Get:**
‚Ä¢ Real-time XP tracking
‚Ä¢ Daily Points rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards

‚ö° **Once Connected:**
/my_xp - View your XP and level
/leaderboard - View top users
/help - Show all commands

üöÄ **Ready to start earning?**
Follow the steps above and join the BBLIP community!`;
        
        console.log(`üì§ Sending manual connection message...`);
        await sendMessageWithRateLimit(chatId, message);
        console.log(`‚úÖ Manual connection message sent`);
      } else {
        const message = `üéâ **Welcome to BBLIP Community!** üéâ

üëã **Hello @${username}!** We're excited to have you join our amazing crypto community!

üåü **What's BBLIP?**
BBLIP transforms your crypto into spendable currency with virtual and physical cards accepted at 40M+ merchants worldwide!

üéØ **Quick Start Guide:**
1Ô∏è‚É£ Visit: ${WEB_APP_URL}/telegram
2Ô∏è‚É£ Connect your wallet
3Ô∏è‚É£ Click "Connect Telegram" button
4Ô∏è‚É£ Start earning XP instantly!

üíé **Reward System:**
ü•â Bronze (0-100 XP): 1 Points/day
ü•à Silver (101-250 XP): 3 Points/day
ü•á Gold (251-500 XP): 5 Points/day
üíé Platinum (501-1000 XP): 10 Points/day
üëë Diamond (1001+ XP): 20 Points/day

‚ö° **Features:**
‚Ä¢ Real-time XP tracking
‚Ä¢ Instant level up notifications
‚Ä¢ Daily Points rewards
‚Ä¢ Community leaderboards
‚Ä¢ Anti-bot protection

üéÆ **Commands:**
/start - Begin your journey
/my_xp - Check your stats
/leaderboard - See top players
/help - Show all commands

üöÄ **Ready to earn while you chat?**
Your messages will earn you XP automatically!${referralProcessed ? '\n\nüéâ **Referral Bonus Applied!** üéâ\nYou joined using a referral link and the referrer has been rewarded!' : ''}`;
        
        console.log(`üì§ Sending welcome message...`);
        const sentMessage = await sendMessageWithRateLimit(chatId, message);
        console.log(`‚úÖ Welcome message sent`);
        
        // Auto-delete welcome message after delay
        if (WELCOME_MESSAGE_DELETE_ENABLED && sentMessage && sentMessage.message_id) {
          setTimeout(async () => {
            try {
              await bot.deleteMessage(chatId, sentMessage.message_id);
              console.log(`üóëÔ∏è Welcome message auto-deleted for @${username} (after ${WELCOME_MESSAGE_DELETE_DELAY/1000}s)`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not auto-delete welcome message: ${error.message}`);
            }
          }, WELCOME_MESSAGE_DELETE_DELAY);
        }
        
        // Send private connection message to user
        try {
          const privateMessage = `üîó **Account Connection Required** üîó

üëã **Hello @${username}!** Welcome to BBLIP Community!

üìä **Current Status:** ‚ùå Not Connected
üí¨ **Chat Activity:** ‚ùå No XP Rewards
üéÅ **Daily Rewards:** ‚ùå Not Available

‚ö†Ô∏è **Important:** You need to connect your wallet to start earning XP from chat activity!

üéØ **Quick Connection Steps:**
1Ô∏è‚É£ Visit: ${WEB_APP_URL}/telegram
2Ô∏è‚É£ Connect your wallet (MetaMask, etc.)
3Ô∏è‚É£ Click "Connect Telegram" button
4Ô∏è‚É£ Use Telegram Login Widget

üíé **What You'll Get After Connection:**
‚Ä¢ Real-time XP from messages
‚Ä¢ Daily Points token rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards
‚Ä¢ Anti-bot protection

‚ö° **Commands Available After Connection:**
/my_xp - Check your progress
/leaderboard - See top players
/help - Show all commands

üöÄ **Ready to start earning?**
Click the button below to connect your account!`;

          // Send private message with inline keyboard
          const keyboard = {
            inline_keyboard: [[
              {
                text: 'üîó Connect My Account',
                url: `${WEB_APP_URL}/telegram`
              }
            ]]
          };

          await bot.sendMessage(userId, privateMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
          
          console.log(`üì± Private connection message sent to @${username} (${userId}) via /start`);
          
        } catch (error) {
          console.error(`‚ùå Error sending private connection message to @${username}:`, error);
          // If private message fails, send a public reminder
          const publicReminder = `üëã @${username} Welcome! Please check your private messages from me to connect your account and start earning XP!`;
          await sendMessageWithRateLimit(chatId, publicReminder);
        }
      }
      return;
    }
    
    console.log(`‚úÖ User already connected to wallet: ${telegramUser.user_id}`);
    
    // Process referral if code was provided
    if (REFERRAL_SYSTEM_ENABLED && referralCode) {
      try {
        console.log(`üéØ Processing referral from /start command: ${referralCode}`);
        
        // Check if user already used referral
        const isDuplicate = await checkReferralDuplicate(userId);
        if (isDuplicate) {
          console.log(`‚ö†Ô∏è User ${userId} already used referral before`);
          return;
        }
        
        // Extract referrer ID from referral code (format: REF123456_1234567890)
        const referrerIdMatch = referralCode.match(/^REF(\d+)_/);
        if (referrerIdMatch) {
          const referrerId = parseInt(referrerIdMatch[1]);
          
          // Don't allow self-referral
          if (referrerId !== userId) {
            console.log(`üéØ Processing referral: ${referrerId} -> ${userId}`);
            const referralSuccess = await processReferral(referrerId, userId, referralCode);
            
            if (referralSuccess) {
              console.log(`‚úÖ Referral processed successfully for user ${userId}`);
              
              // Only show success message for new users
              const successMessage = `üéâ *Referral Success\!* üéâ

üëã *Hello @${username}\\!* Welcome to BBLIP Community\!

‚úÖ *Referral Processed:*
‚Ä¢ You joined using a referral link
‚Ä¢ The referrer has been rewarded with XP
‚Ä¢ Your account is now connected

üöÄ *Next Steps:*
1Ô∏è‚É£ Join our main community group
2Ô∏è‚É£ Start chatting to earn XP
3Ô∏è‚É£ Connect your wallet for Points rewards

üíé *What You'll Get:*
‚Ä¢ Real\-time XP from messages
‚Ä¢ Daily Points token rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards

üîó *Join Our Community:*`;

              const keyboard = {
                inline_keyboard: [
                  [{
                    text: 'üöÄ Join BBLIP Community',
                    url: `https://t.me/+XqnFyuXylP01MjI0`
                  }],
                  [{
                    text: 'üîó Connect Wallet',
                    url: `${WEB_APP_URL}/telegram`
                  }]
                ]
              };

              await bot.sendMessage(userId, successMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
              
              console.log(`‚úÖ Referral success message sent to user ${userId}`);
              return; // Don't send the regular welcome message
              
            } else {
              console.log(`‚ö†Ô∏è Referral processing failed for user ${userId}`);
            }
          } else {
            console.log(`‚ö†Ô∏è Self-referral attempted by user ${userId}`);
          }
        } else {
          console.log(`‚ö†Ô∏è Invalid referral code format: ${referralCode}`);
        }
      } catch (error) {
        console.error(`‚ùå Error processing referral from /start:`, error);
      }
    }
    
    // Get or create referral link for connected user
    const referralLink = await generateReferralLink(userId);
    
    // G√º√ßl√º MarkdownV2 ka√ßƒ±≈ü fonksiyonu
    function escapeMarkdownV2(text) {
      return String(text)
        .replace(/([_\*\[\]\(\)~`>#+\-=|{}.!\\])/g, '\\$1');
    }

    const safeUserDisplayName = escapeMarkdownV2(userDisplayName);
    const safeReferralLink = escapeMarkdownV2(referralLink);
    const safeXP = escapeMarkdownV2(REFERRAL_XP_REWARD);
    const safeBBLP = escapeMarkdownV2(REFERRAL_BBLP_REWARD);

    // Escape all message lines for MarkdownV2
    const messageLines = [
      'üöÄ *Invite & Earn Rewards!*',
      '',
      `Hi ${safeUserDisplayName}! Here\'s your unique invite link:`,
      '',
      '‚û°Ô∏è',
      `${safeReferralLink}`,
      '',
      'üéÅ *What You Get:*',
      `‚Ä¢ +${safeXP} XP for every friend who joins`,
      `‚Ä¢ +${safeBBLP} Points tokens per referral`,
      '‚Ä¢ Track your progress and climb the leaderboard!',
      '',
      'üí° *How it works:*',
      '1Ô∏è‚É£ Share your link with friends (use the Share or Copy button below)',
      '2Ô∏è‚É£ They click the link, start the bot, and join our group',
      '3Ô∏è‚É£ You both get rewarded instantly!',
      '',
      'üìà *Tip:* The more you share, the more you earn!',
      '',
      '*Note: Your friend must start the bot and join the group for your reward to be counted.*'
    ];
    // Escape each line for MarkdownV2
    const safeMessage = messageLines.map(escapeMarkdownV2).join('\n');

    const shareMessage = `üöÄ Join me on BBLIP and unlock exclusive crypto rewards!\n\nüí∞ $100,000 Prize Pool! üí∞\n\nBBLIP is the next-gen platform to earn, spend, and grow your crypto with real utility.\n\nüëâ Tap the link to get started:\n${referralLink}\n\nWhy join?\n‚Ä¢ Earn daily Points token rewards\n‚Ä¢ Level up for bigger bonuses\n‚Ä¢ Compete on the leaderboard\n‚Ä¢ Invite friends and multiply your earnings!\n‚Ä¢ Win a share of the $100,000 prize pool!\n\nLet's grow together in the BBLIP community!`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üì§ Share Referral Link',
            url: `https://t.me/share/url?url=&text=${encodeURIComponent(shareMessage)}`
          }
        ]
      ]
    };

    // Callback handler'ƒ± globalde bir kez tanƒ±mla
    if (!global.__copyReferralHandlerSet) {
      bot.on('callback_query', async (callbackQuery) => {
        if (callbackQuery.data && callbackQuery.data === 'copy_referral_link') {
          const chatId = callbackQuery.message.chat.id;
          // Look up the referral link for this user
          const userId = callbackQuery.from.id;
          // Get or create referral link for this user
          const referralLink = await generateReferralLink(userId);
          await bot.answerCallbackQuery(callbackQuery.id, { text: 'Referans linkin a≈üaƒüƒ±da!', show_alert: false });
          await bot.sendMessage(
            chatId,
            `üìã Referans linkin:\n${referralLink}\n\nKopyalamak i√ßin linke uzun bas ve 'Kopyala'ya tƒ±kla.`,
          );
        }
      });
      global.__copyReferralHandlerSet = true;
    }

    const sentMessage = await sendMessageWithRateLimit(chatId, safeMessage, {
      parse_mode: 'MarkdownV2',
      reply_markup: keyboard
    });
    if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
      setTimeout(async () => {
        try {
          await bot.deleteMessage(chatId, sentMessage.message_id);
          console.log(`üóëÔ∏è Deleted message ${sentMessage.message_id} after 15s`);
        } catch (e) {
          console.error(`‚ùå Failed to auto-delete message ${sentMessage.message_id}:`, e);
        }
      }, 15000);
    }
    
  } catch (error) {
    console.error('‚ùå Error in /start command:', error);
    console.error('Error details:', JSON.stringify(error, null, 2));
    await sendMessageWithRateLimit(chatId, 'Sorry, something went wrong. Please try again.');
  }
});

bot.onText(/\/my_xp/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userDisplayName = getUserDisplayName(msg);

  try {
    // First, check if user is registered in telegram_users
    const { data: telegramUser, error: userError } = await supabase
      .from('telegram_users')
      .select('*')
      .eq('telegram_id', userId)
      .single();

    if (userError || !telegramUser) {
      // User is not registered, prompt to connect wallet
      const notRegisteredMsg = `üîó <b>Connect Your Wallet to Start Earning XP</b>\n\n${userDisplayName}, to start earning XP, please connect your wallet first.\nOnce connected, your chat activity will be rewarded automatically.`;
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üîó Connect Wallet',
            url: `${WEB_APP_URL}/social-connections`
          }
        ]]
      };
      await sendMessageWithRateLimit(chatId, notRegisteredMsg, { parse_mode: 'HTML', reply_markup: keyboard });
      return;
    }

    // Get user's activity data from telegram_activities table
    const { data: activity, error } = await supabase
      .from('telegram_activities')
      .select('*, referral_count')
      .eq('telegram_id', userId)
      .single();

    if (error || !activity) {
      // Send private connection message
      try {
        const privateMessage = `üîó **Account Connection Required** üîó

üëã **Hello!** You're not connected to our system yet.

üìä **Current Status:** ‚ùå Not Connected
üí¨ **Chat Activity:** ‚ùå No XP Rewards
üéÅ **Daily Rewards:** ‚ùå Not Available

‚ö†Ô∏è **To check your XP and earn rewards:**
1Ô∏è‚É£ Visit: ${WEB_APP_URL}/telegram
2Ô∏è‚É£ Connect your wallet (MetaMask, etc.)
3Ô∏è‚É£ Click "Connect Telegram" button
4Ô∏è‚É£ Use Telegram Login Widget

üíé **After connection you'll get:**
‚Ä¢ Real-time XP tracking
‚Ä¢ Daily Points token rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards

‚ö° **Commands Available After Connection:**
/my_xp - Check your progress
/leaderboard - See top players
/help - Show all commands

üöÄ **Connect now to start earning!**`;

        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üîó Connect My Account',
              url: `${WEB_APP_URL}/telegram`
            }
          ]]
        };

        await bot.sendMessage(userId, privateMessage, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
        await sendMessageWithRateLimit(chatId, 'üëã Please check your private messages from me to connect your account and start earning XP!');
      } catch (error) {
        await sendMessageWithRateLimit(chatId, 'You are not connected to our system. Please visit our web app first.');
      }
      return;
    }

    // Add cached data to get real-time stats
    let totalXP = activity.total_xp;
    let messageCount = activity.message_count;
    
    if (messageCache.has(userId)) {
      const cached = messageCache.get(userId);
      totalXP += cached.xpEarned;
      messageCount += cached.messageCount;
      
      console.log(`üìä Real-time stats for user ${userDisplayName}:`, {
        database: { xp: activity.total_xp, messages: activity.message_count },
        cached: { xp: cached.xpEarned, messages: cached.messageCount },
        total: { xp: totalXP, messages: messageCount }
      });
    }
    
    const currentLevel = calculateLevel(totalXP);
    const nextLevel = currentLevel + 1;
    
    // Calculate XP needed for next level based on level thresholds
    let xpToNext = 0;
    if (currentLevel === 1) xpToNext = 101 - totalXP; // Bronze to Silver
    else if (currentLevel === 2) xpToNext = 251 - totalXP; // Silver to Gold
    else if (currentLevel === 3) xpToNext = 501 - totalXP; // Gold to Platinum
    else if (currentLevel === 4) xpToNext = 1001 - totalXP; // Platinum to Diamond
    else xpToNext = 0; // Diamond level
    
    const currentLevelName = getLevelName(currentLevel);
    const nextLevelName = getLevelName(nextLevel);
    
    const referralCount = activity.referral_count || 0;
    
    let message = `üìä Your XP Stats\n\n` +
      `üë§ User: ${userDisplayName}\n` +
      `üèÜ Level: ${currentLevel} (${currentLevelName})\n` +
      `‚≠ê Total XP: ${totalXP.toLocaleString()}\n` +
      `üí¨ Messages: ${messageCount.toLocaleString()}\n` +
      `üîó Referrals: ${referralCount}\n\n`;
    
    if (xpToNext > 0) {
      message += `üìà ${xpToNext.toLocaleString()} XP needed for Level ${nextLevel} (${nextLevelName})`;
    } else {
      message += `üéâ You've reached the highest level (${currentLevelName})!`;
    }
    
    // Add cache info if there's pending data
    if (messageCache.has(userId)) {
      const cached = messageCache.get(userId);
      message += `\n\n‚è∞ Pending: +${cached.xpEarned} XP (${cached.messageCount} messages) - Will be saved in next batch`;
    }
    
    await sendMessageWithRateLimit(chatId, message).then(sentMessage => {
      // Auto-delete after 15 seconds if in a group
      if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
        setTimeout(async () => {
          try {
            await bot.deleteMessage(chatId, sentMessage.message_id);
            console.log(`üóëÔ∏è Deleted message ${sentMessage.message_id} after 15s`);
          } catch (e) {
            console.error(`‚ùå Failed to auto-delete message ${sentMessage.message_id}:`, e);
          }
        }, 15000);
      }
    });
    console.log(`‚úÖ XP stats sent to ${userDisplayName}`);
    
  } catch (error) {
    console.error('‚ùå Error in /my_xp command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error fetching your XP stats. Please try again.');
  }
});

bot.onText(/\/leaderboard/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    console.log('üìä Fetching leaderboard data...');
    
    // Get top 10 users by XP from telegram_activities table
    const { data: topUsers, error } = await supabase
      .from('telegram_activities')
      .select('total_xp, telegram_id')
      .order('total_xp', { ascending: false })
      .limit(10);
    
    console.log('üìä Leaderboard query result:', { data: topUsers, error });
    
    if (error) {
      console.error('‚ùå Error fetching leaderboard:', error);
      await sendMessageWithRateLimit(chatId, '‚ùå Error fetching leaderboard data.');
      return;
    }
    
    if (!topUsers || topUsers.length === 0) {
      // Send private connection message
      try {
        const privateMessage = `üîó **Account Connection Required** üîó

üëã **Hello!** You're not connected to our system yet.

üìä **Current Status:** ‚ùå Not Connected
üí¨ **Chat Activity:** ‚ùå No XP Rewards
üéÅ **Daily Rewards:** ‚ùå Not Available

‚ö†Ô∏è **To view leaderboard and earn rewards:**
1Ô∏è‚É£ Visit: ${WEB_APP_URL}/telegram
2Ô∏è‚É£ Connect your wallet (MetaMask, etc.)
3Ô∏è‚É£ Click "Connect Telegram" button
4Ô∏è‚É£ Use Telegram Login Widget

üíé **After connection you'll get:**
‚Ä¢ Real-time XP tracking
‚Ä¢ Daily Points token rewards
‚Ä¢ Level up notifications
‚Ä¢ Community leaderboards

‚ö° **Commands Available After Connection:**
/my_xp - Check your progress
/leaderboard - See top players
/help - Show all commands

üöÄ **Connect now to start earning!**`;

        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üîó Connect My Account',
              url: `${WEB_APP_URL}/telegram`
            }
          ]]
        };

        await bot.sendMessage(userId, privateMessage, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
        
        console.log(`üì± /leaderboard connection message sent to user ${userId}`);
        
        // Send public reminder
        await sendMessageWithRateLimit(chatId, `üëã ${userDisplayName} Please check your private messages from me to connect your wallet and view the leaderboard!`);
        
      } catch (error) {
        console.error(`‚ùå Error sending /leaderboard connection message:`, error);
      await sendMessageWithRateLimit(chatId, 'üìä No leaderboard data available yet. Start chatting to earn XP!');
      }
      return;
    }
    
    // Get usernames for each user, but only include those registered in telegram_users
    const userPromises = topUsers.map(async (user) => {
      const { data: userInfo, error: userError } = await supabase
        .from('telegram_users')
        .select('username, first_name')
        .eq('telegram_id', user.telegram_id)
        .single();
      if (userError || !userInfo) return null; // Exclude if not registered
      return {
        ...user,
        username: userInfo.username || userInfo.first_name || 'Unknown User'
      };
    });
    const usersWithNames = (await Promise.all(userPromises)).filter(Boolean);

    let message = `üèÜ Top 10 XP Leaderboard\n\n`;
    usersWithNames.forEach((user, index) => {
      const xpFormatted = (user.total_xp || 0).toLocaleString();
      const level = calculateLevel(user.total_xp);
      const emoji = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
      message += `${emoji} ${index + 1}. @${user.username} - ${xpFormatted} XP (Level ${level})\n`;
    });
    message += '\nüí° Keep chatting to earn more XP and climb the leaderboard!';
    await sendMessageWithRateLimit(chatId, message).then(sentMessage => {
      if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
        setTimeout(async () => {
          try {
            await bot.deleteMessage(chatId, sentMessage.message_id);
            console.log(`üóëÔ∏è Deleted message ${sentMessage.message_id} after 15s`);
          } catch (e) {
            console.error(`‚ùå Failed to auto-delete message ${sentMessage.message_id}:`, e);
          }
        }, 15000);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error in /leaderboard command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error fetching leaderboard data.');
  }
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // Check if user is admin in this chat
  let isAdmin = false;
  try {
    const chatMember = await bot.getChatMember(chatId, userId);
    if (chatMember && (chatMember.status === 'creator' || chatMember.status === 'administrator')) {
      isAdmin = true;
    }
  } catch (e) { /* ignore errors, treat as not admin */ }

  let message = `ü§ñ <b>BBLIP Telegram Bot Help</b> ü§ñ\n\n<b>User Commands</b>\n/start ‚Äî Connect your account\n/my_xp ‚Äî View your XP & level\n/my_referral ‚Äî Get your referral link\n/leaderboard ‚Äî View top users\n/help ‚Äî Show this help\n\n<b>How to Earn</b>\n‚Ä¢ Chat to earn XP automatically\n‚Ä¢ Invite friends for bonus rewards\n‚Ä¢ Level up for bigger daily Points\n\n<i>Tip: Connect your wallet to unlock all features and maximize your rewards!</i>\n\nFor more info, visit <a href='https://bblip.io/social-connections'>bblip.io/social-connections</a>`;

  if (isAdmin) {
    message += `\n\n<b>Admin Commands</b>\n/ban, /unban, /restrict, /warn, /batch_debug, /process_batch, /test_xp`;
  }

  await sendMessageWithRateLimit(chatId, message, { parse_mode: 'HTML' });
});

// Admin commands (Rose bot style)
bot.onText(/\/ban (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  const args = match[1].split(' ');
  const targetUser = args[0];
  const reason = args.slice(1).join(' ') || 'No reason provided';
  
  try {
    // Parse target user (username or user ID)
    let targetUserId;
    if (targetUser.startsWith('@')) {
      // Username
      const username = targetUser.substring(1);
      // Note: In a real implementation, you'd need to resolve username to user ID
      // For now, we'll use a placeholder
      targetUserId = username; // This would need proper resolution
    } else {
      // User ID
      targetUserId = parseInt(targetUser);
    }
    
    const banResult = await banUser(chatId, targetUserId, reason);
    
    if (banResult.success) {
      const banMessage = `üö´ User Banned\n\n` +
        `User: ${targetUser}\n` +
        `Reason: ${reason}\n` +
        `Type: ${banResult.type}\n` +
        `By: ${getUserDisplayName(msg)}`;
      
      await sendMessageWithRateLimit(chatId, banMessage);
    } else {
      await sendMessageWithRateLimit(chatId, `‚ùå Failed to ban user: ${banResult.error}`);
    }
  } catch (error) {
    console.error('Error in ban command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error processing ban command.');
  }
});

bot.onText(/\/unban (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  const targetUser = match[1];
  
  try {
    let targetUserId;
    if (targetUser.startsWith('@')) {
      const username = targetUser.substring(1);
      targetUserId = username; // This would need proper resolution
    } else {
      targetUserId = parseInt(targetUser);
    }
    
    const unbanResult = await unbanUser(chatId, targetUserId);
    
    if (unbanResult.success) {
      const unbanMessage = `üîì User Unbanned\n\n` +
        `User: ${targetUser}\n` +
        `By: ${getUserDisplayName(msg)}`;
      
      await sendMessageWithRateLimit(chatId, unbanMessage);
    } else {
      await sendMessageWithRateLimit(chatId, `‚ùå Failed to unban user: ${unbanResult.error}`);
    }
  } catch (error) {
    console.error('Error in unban command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error processing unban command.');
  }
});

// Debug command for testing level up system (admin only)
bot.onText(/\/debug_level/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    console.log('üîç Debug level up system...');
    
    // Get all users with their current levels
    const { data: activities, error } = await supabase
      .from('telegram_activities')
      .select('telegram_id, total_xp, current_level')
      .order('total_xp', { ascending: false })
      .limit(10);
    
    if (error) {
      console.error('Error fetching activities:', error);
      await sendMessageWithRateLimit(chatId, '‚ùå Error fetching user data.');
      return;
    }
    
    let debugMessage = `üîç Level Up System Debug\n\n`;
    debugMessage += `üìä Top 10 users by XP:\n\n`;
    
    for (const activity of activities) {
      const calculatedLevel = calculateLevel(activity.total_xp);
      const levelName = getLevelName(calculatedLevel);
      const dbLevel = activity.current_level;
      const dbLevelName = getLevelName(dbLevel);
      
      debugMessage += `üë§ User ${activity.telegram_id}:\n`;
      debugMessage += `  XP: ${activity.total_xp}\n`;
      debugMessage += `  DB Level: ${dbLevel} (${dbLevelName})\n`;
      debugMessage += `  Calculated: ${calculatedLevel} (${levelName})\n`;
      debugMessage += `  Status: ${calculatedLevel === dbLevel ? '‚úÖ OK' : '‚ö†Ô∏è Mismatch'}\n\n`;
    }
    
    debugMessage += `üîÑ Batch processing every 60 seconds\n`;
    debugMessage += `‚ö° Real-time level detection: Enabled\n`;
    debugMessage += `üìù Cache size: ${messageCache.size} users\n`;
    debugMessage += `üîí Processed messages: ${processedMessages.size}`;
    
    await sendMessageWithRateLimit(chatId, debugMessage);
    console.log('‚úÖ Debug level up system completed');
    
  } catch (error) {
    console.error('‚ùå Error in debug_level command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error processing debug command.');
  }
});

// Admin stats command
bot.onText(/\/admin_stats/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    console.log('üìä Generating admin stats...');
    
    // Get database stats
    const { data: activities, error: activitiesError } = await supabase
      .from('telegram_activities')
      .select('total_xp, message_count');
    
    const { data: users, error: usersError } = await supabase
      .from('telegram_users')
      .select('telegram_id');
    
    if (activitiesError || usersError) {
      throw new Error('Database query failed');
    }
    
    const totalXP = activities.reduce((sum, activity) => sum + (activity.total_xp || 0), 0);
    const totalMessages = activities.reduce((sum, activity) => sum + (activity.message_count || 0), 0);
    const totalUsers = users.length;
    
    const stats = {
      cacheSize: messageCache.size,
      processedMessages: processedMessages.size,
      queueSize: messageQueue.length,
      activeUsers: userMessageHistory.size,
      totalMessages: totalMessages + messageCount,
      totalXP: totalXP
    };
    
    await sendAdminStats(stats);
    await sendMessageWithRateLimit(chatId, '‚úÖ Admin stats sent to admin group');
    
  } catch (error) {
    console.error('‚ùå Error in admin_stats command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error generating admin stats.');
  }
});

// Admin log command
bot.onText(/\/admin_log (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  const logMessage = match[1];
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    await sendAdminLog(logMessage, 'MANUAL');
    await sendMessageWithRateLimit(chatId, '‚úÖ Log message sent to admin group');
  } catch (error) {
    console.error('‚ùå Error in admin_log command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error sending log message.');
  }
});

// Admin test command
bot.onText(/\/admin_test/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    // Check admin group ID
    if (!ADMIN_GROUP_ID || (!ADMIN_GROUP_ID.startsWith('-') && !ADMIN_GROUP_ID.startsWith('-100'))) {
      await sendMessageWithRateLimit(chatId, 
        `‚ùå Admin group not configured!\n\n` +
        `Current ID: ${ADMIN_GROUP_ID}\n` +
        `Required format: -xxxxxxxxx (normal group) or -100xxxxxxxxx (supergroup)\n\n` +
        `To fix:\n` +
        `1. Create a group or supergroup\n` +
        `2. Add bot as admin\n` +
        `3. Set TELEGRAM_ADMIN_GROUP_ID environment variable`
      );
      return;
    }
    
    await sendAdminLog('üß™ Admin test message - Bot is working correctly!', 'TEST');
    await sendMessageWithRateLimit(chatId, '‚úÖ Test message sent to admin group');
  } catch (error) {
    console.error('‚ùå Error in admin_test command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error sending test message.');
  }
});

// Batch processor debug command
bot.onText(/\/batch_debug/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    const batchStatus = {
      queueLength: batchProcessor.queue.length,
      processing: batchProcessor.processing,
      batchSize: batchProcessor.batchSize,
      batchInterval: batchProcessor.batchInterval,
      intervalActive: !!batchProcessor.interval,
      cacheSize: messageCache.size,
      processedMessages: processedMessages.size,
      metrics: metrics
    };
    
    const message = `üîç **Batch Processor Debug** üîç\n\n` +
      `üì¶ **Queue Status:**\n` +
      `‚Ä¢ Queue Length: ${batchStatus.queueLength}\n` +
      `‚Ä¢ Processing: ${batchStatus.processing ? 'Yes' : 'No'}\n` +
      `‚Ä¢ Batch Size: ${batchStatus.batchSize}\n` +
      `‚Ä¢ Interval: ${batchStatus.batchInterval}ms\n` +
      `‚Ä¢ Interval Active: ${batchStatus.intervalActive ? 'Yes' : 'No'}\n\n` +
      `üíæ **Cache Status:**\n` +
      `‚Ä¢ Message Cache: ${batchStatus.cacheSize} users\n` +
      `‚Ä¢ Processed Messages: ${batchStatus.processedMessages}\n\n` +
      `üìä **Metrics:**\n` +
      `‚Ä¢ Messages Processed: ${batchStatus.metrics.messagesProcessed}\n` +
      `‚Ä¢ Batch Updates: ${batchStatus.metrics.batchUpdates}\n` +
      `‚Ä¢ Errors: ${batchStatus.metrics.errors}\n\n` +
      `üîß **Queue Contents:**\n` +
      `${batchStatus.queueLength > 0 ? 
        batchProcessor.queue.map((item, index) => 
          `${index + 1}. User ${item.telegramId}: +${item.data.xpEarned} XP (${item.data.messageCount} messages)`
        ).join('\n') : 
        'No items in queue'
      }`;
    
    await sendMessageWithRateLimit(chatId, message, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('‚ùå Error in batch_debug command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error getting batch processor status.');
  }
});

// Manual batch processing trigger
bot.onText(/\/process_batch/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    if (batchProcessor.queue.length === 0) {
      await sendMessageWithRateLimit(chatId, 'üì¶ Queue is empty. No batch to process.');
      return;
    }
    
    if (batchProcessor.processing) {
      await sendMessageWithRateLimit(chatId, '‚è≥ Batch is already processing. Please wait.');
      return;
    }
    
    console.log('üîß Manual batch processing triggered by admin');
    await batchProcessor.processBatch();
    await sendMessageWithRateLimit(chatId, `‚úÖ Manual batch processing completed. Processed ${batchProcessor.queue.length} items.`);
    
  } catch (error) {
    console.error('‚ùå Error in manual batch processing:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error processing batch.');
  }
});

// Test XP system command
bot.onText(/\/test_xp (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  const args = match[1].split(' ');
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    const targetUserId = parseInt(args[0]);
    const xpAmount = parseInt(args[1]) || 1;
    
    if (!targetUserId || !xpAmount) {
      await sendMessageWithRateLimit(chatId, '‚ùå Usage: /test_xp <user_id> <xp_amount>');
      return;
    }
    
    console.log(`üß™ Testing XP system: Adding ${xpAmount} XP to user ${targetUserId}`);
    
    // Add to batch processor
    batchProcessor.add(targetUserId, xpAmount, 'test');
    
    await sendMessageWithRateLimit(chatId, `üß™ Added ${xpAmount} XP to user ${targetUserId}. Check /batch_debug to see queue status.`);
    
  } catch (error) {
    console.error('‚ùå Error in test_xp command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error testing XP system.');
  }
});

// Get group info command
bot.onText(/\/group_info/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    const chatInfo = await bot.getChat(chatId);
          const message = `üìä Group Information\n\n` +
        `üÜî Chat ID: ${chatInfo.id}\n` +
        `üìù Title: ${chatInfo.title || 'N/A'}\n` +
        `üë• Type: ${chatInfo.type}\n` +
        `üë§ Username: @${chatInfo.username || 'N/A'}\n` +
        `üìã Description: ${chatInfo.description || 'N/A'}\n\n` +
        `üí° For Admin Group Setup:\n` +
        `‚Ä¢ Current type: ${chatInfo.type}\n` +
        `‚Ä¢ Current ID: ${chatInfo.id}\n` +
        `‚Ä¢ Status: ${chatInfo.type === 'supergroup' ? '‚úÖ Ready for admin logs' : '‚ö†Ô∏è Normal group (may upgrade to supergroup)'}\n\n` +
        `üîß Environment Variable:\n` +
        `TELEGRAM_ADMIN_GROUP_ID=${chatInfo.id}\n\n` +
        `üìù Note: Both normal groups and supergroups work for admin logs.`;
    
    await sendMessageWithRateLimit(chatId, message);
  } catch (error) {
    console.error('‚ùå Error in group_info command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error getting group information.');
  }
});

// Test welcome message command
bot.onText(/\/test_welcome/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    console.log('üß™ Testing welcome message system...');
    
    // Simulate a new member join
    const testMember = {
      id: msg.from.id,
      username: msg.from.username || msg.from.first_name,
      first_name: msg.from.first_name,
      is_bot: false
    };
    
    await handleNewMember(chatId, testMember);
    await sendMessageWithRateLimit(chatId, '‚úÖ Welcome message test completed');
    
  } catch (error) {
    console.error('‚ùå Error in test_welcome command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error testing welcome message.');
  }
});

// Referral command
bot.onText(/\/my_referral/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userDisplayName = getUserDisplayName(msg);
  
  try {
    console.log(`üîó /my_referral command from ${userDisplayName} (${userId})`);
    
    // Check if user is connected
    const { data: telegramUser, error } = await supabase
      .from('telegram_users')
      .select('*')
      .eq('telegram_id', userId)
      .single();
    
    if (error || !telegramUser) {
      // Send private connection message
      try {
        const privateMessage = `üîó <b>Connect Wallet to Get Your Referral Link</b>\n\nüëã <b>Hello!</b> To get your referral link and start earning Points rewards, please connect your wallet.\n\n<b>Status:</b> ‚ùå Not Connected\n<b>Referral Link:</b> ‚ùå Not Available\n<b>Points Rewards:</b> ‚ùå Not Available\n\n<b>How to Connect:</b>\n1Ô∏è‚É£ Visit: <a href='https://bblip.io/social-connections'>bblip.io/social-connections</a>\n2Ô∏è‚É£ Connect your wallet (MetaMask, etc.)\n3Ô∏è‚É£ Click "Connect Telegram"\n\n<b>After connecting, you'll get:</b>\n‚Ä¢ Your personal referral link\n‚Ä¢ XP & Points rewards for each referral\n‚Ä¢ Daily Points token rewards\n\nüöÄ <b>Connect now to unlock your rewards!</b>`;
        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üîó Connect Wallet',
              url: 'https://bblip.io/social-connections'
            }
          ]]
        };
        await bot.sendMessage(userId, privateMessage, {
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
        
        console.log(`üì± /my_referral connection message sent to user ${userId}`);
        
        // Send public reminder
        await sendMessageWithRateLimit(chatId, `üëã ${userDisplayName} Please check your private messages from me to connect your wallet and get your referral link!`);
        
      } catch (error) {
        console.error(`‚ùå Error sending /my_referral connection message:`, error);
        await sendMessageWithRateLimit(chatId, 'You need to connect your wallet first. Visit our web app to connect.');
      }
      return;
    }
    
    // Get user's referral stats
    const { data: activity, error: activityError } = await supabase
      .from('telegram_activities')
      .select('referral_count, total_xp')
      .eq('telegram_id', userId)
      .single();
    
    const referralCount = activity?.referral_count || 0;
    const totalXP = activity?.total_xp || 0;
    
    // Get or create referral link
    const referralLink = await generateReferralLink(userId);
    
    if (!referralLink) {
      await sendMessageWithRateLimit(chatId, '‚ùå Error getting referral link. Please try again later.');
      return;
    }
    
    // G√º√ßl√º MarkdownV2 ka√ßƒ±≈ü fonksiyonu
    function escapeMarkdownV2(text) {
      return String(text)
        .replace(/([_\*\[\]\(\)~`>#+\-=|{}.!\\])/g, '\\$1');
    }

    const safeUserDisplayName = escapeMarkdownV2(userDisplayName);
    const safeReferralLink = escapeMarkdownV2(referralLink);
    const safeXP = escapeMarkdownV2(REFERRAL_XP_REWARD);
    const safeBBLP = escapeMarkdownV2(REFERRAL_BBLP_REWARD);

    // Escape all message lines for MarkdownV2
    const messageLines = [
      'üöÄ *Invite & Earn Rewards!*',
      '',
      `Hi ${safeUserDisplayName}! Here\'s your unique invite link:`,
      '',
      '‚û°Ô∏è',
      `${safeReferralLink}`,
      '',
      'üéÅ *What You Get:*',
      `‚Ä¢ +${safeXP} XP for every friend who joins`,
      `‚Ä¢ +${safeBBLP} Points tokens per referral`,
      '‚Ä¢ Track your progress and climb the leaderboard!',
      '',
      'üí° *How it works:*',
      '1Ô∏è‚É£ Share your link with friends (use the Share or Copy button below)',
      '2Ô∏è‚É£ They click the link, start the bot, and join our group',
      '3Ô∏è‚É£ You both get rewarded instantly!',
      '',
      'üìà *Tip:* The more you share, the more you earn!',
      '',
      '*Note: Your friend must start the bot and join the group for your reward to be counted.*'
    ];
    // Escape each line for MarkdownV2
    const safeMessage = messageLines.map(escapeMarkdownV2).join('\n');

    const shareMessage = `üöÄ Join me on BBLIP and unlock exclusive crypto rewards!\n\nüí∞ $100,000 Prize Pool! üí∞\n\nBBLIP is the next-gen platform to earn, spend, and grow your crypto with real utility.\n\nüëâ Tap the link to get started:\n${referralLink}\n\nWhy join?\n‚Ä¢ Earn daily Points token rewards\n‚Ä¢ Level up for bigger bonuses\n‚Ä¢ Compete on the leaderboard\n‚Ä¢ Invite friends and multiply your earnings!\n‚Ä¢ Win a share of the $100,000 prize pool!\n\nLet's grow together in the BBLIP community!`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üì§ Share Referral Link',
            url: `https://t.me/share/url?url=&text=${encodeURIComponent(shareMessage)}`
          }
        ]
      ]
    };

    // Callback handler'ƒ± globalde bir kez tanƒ±mla
    if (!global.__copyReferralHandlerSet) {
      bot.on('callback_query', async (callbackQuery) => {
        if (callbackQuery.data && callbackQuery.data === 'copy_referral_link') {
          const chatId = callbackQuery.message.chat.id;
          // Look up the referral link for this user
          const userId = callbackQuery.from.id;
          // Get or create referral link for this user
          const referralLink = await generateReferralLink(userId);
          await bot.answerCallbackQuery(callbackQuery.id, { text: 'Referans linkin a≈üaƒüƒ±da!', show_alert: false });
          await bot.sendMessage(
            chatId,
            `üìã Referans linkin:\n${referralLink}\n\nKopyalamak i√ßin linke uzun bas ve 'Kopyala'ya tƒ±kla.`,
          );
        }
      });
      global.__copyReferralHandlerSet = true;
    }

    // Only send the referral message as a private message to the user
    if (msg.chat.type === 'private') {
      await sendMessageWithRateLimit(chatId, safeMessage, {
        parse_mode: 'MarkdownV2',
        reply_markup: keyboard
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error in /my_referral command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error getting referral link. Please try again later.');
  }
});

// Auto-delete configuration command
bot.onText(/\/auto_delete/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, adminId);
    if (!['creator', 'administrator'].includes(chatMember.status)) {
      await sendMessageWithRateLimit(chatId, '‚ùå You need admin privileges to use this command.');
      return;
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    const message = `üóëÔ∏è Auto-Delete Configuration\n\n` +
      `Current Status: ${WELCOME_MESSAGE_DELETE_ENABLED ? '‚úÖ Enabled' : '‚ùå Disabled'}\n` +
      `Delete Delay: ${WELCOME_MESSAGE_DELETE_DELAY/1000} seconds\n\n` +
      `To change settings, modify these variables in bot.js:\n` +
      `‚Ä¢ WELCOME_MESSAGE_DELETE_ENABLED: true/false\n` +
      `‚Ä¢ WELCOME_MESSAGE_DELETE_DELAY: ${WELCOME_MESSAGE_DELETE_DELAY}ms\n\n` +
      `üìù Note: Changes require bot restart`;
    
    await sendMessageWithRateLimit(chatId, message);
  } catch (error) {
    console.error('‚ùå Error in auto_delete command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error getting auto-delete configuration.');
  }
});

// Test referral system command
bot.onText(/\/test_referral/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, userId);
    if (!chatMember || (chatMember.status !== 'creator' && chatMember.status !== 'administrator')) {
      return; // Not admin, ignore
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    // Generate a test referral link
    const referralData = await generateReferralLink(userId);
    
    if (!referralData) {
      await sendMessageWithRateLimit(chatId, '‚ùå Error generating test referral link');
      return;
    }
    
    const message = `üß™ **Referral System Test** üß™

üîó **Test Referral Link Generated:**
${referralData.inviteLink}

üìù **Referral Code:** \`${referralData.referralCode}\`

üß™ **Test Instructions:**
1Ô∏è‚É£ Copy the link above
2Ô∏è‚É£ Open in a new browser/device
3Ô∏è‚É£ Click the link to go to bot first
4Ô∏è‚É£ Bot should process referral and redirect to group
5Ô∏è‚É£ Check if referral is processed

üìä **Expected Result:**
‚Ä¢ User should go to bot first
‚Ä¢ Bot should process referral automatically
‚Ä¢ User should get redirected to group
‚Ä¢ You should receive a notification
‚Ä¢ Your referral count should increase

üîß **Debug Info:**
‚Ä¢ Link Format: Bot deep link with referral code
‚Ä¢ Processing: Via /start command in bot
‚Ä¢ Database tracking: Enabled`;

    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üß™ Test Referral Link',
          url: referralData.inviteLink
        }
      ]]
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
  } catch (error) {
    console.error('Error in test referral command:', error);
    await sendMessageWithRateLimit(chatId, '‚ùå Error testing referral system');
  }
});

// Referral statistics command
bot.onText(/\/referral_stats/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;
  
  // Check if user is admin
  try {
    const chatMember = await bot.getChatMember(chatId, userId);
    if (!chatMember || (chatMember.status !== 'creator' && chatMember.status !== 'administrator')) {
      return; // Not admin, ignore
    }
  } catch (error) {
    console.error('Error checking admin status:', error);
    return;
  }
  
  try {
    console.log(`üìä Admin ${userId} requesting referral statistics...`);
    
    // Get referral join statistics
    const { data: joinStats, error: joinError } = await supabase
      .from('telegram_referral_joins')
      .select('*');
    
    if (joinError) {
      console.error(`‚ùå Error fetching referral join stats:`, joinError);
      await bot.sendMessage(chatId, `‚ùå Error fetching referral statistics: ${joinError.message}`);
      return;
    }
    
    // Get referral attempt statistics
    const { data: attemptStats, error: attemptError } = await supabase
      .from('telegram_referral_attempts')
      .select('*');
    
    if (attemptError) {
      console.error(`‚ùå Error fetching referral attempt stats:`, attemptError);
      await bot.sendMessage(chatId, `‚ùå Error fetching referral attempt statistics: ${attemptError.message}`);
      return;
    }
    
    // Calculate statistics
    const totalJoins = joinStats.length;
    const successfulJoins = joinStats.filter(j => j.join_status === 'completed').length;
    const pendingJoins = joinStats.filter(j => j.join_status === 'pending').length;
    const failedJoins = joinStats.filter(j => j.join_status === 'failed').length;
    
    const totalAttempts = attemptStats.length;
    const successfulAttempts = attemptStats.filter(a => a.attempt_status === 'success').length;
    const failedAttempts = attemptStats.filter(a => a.attempt_status === 'failed').length;
    const blockedAttempts = attemptStats.filter(a => a.attempt_status === 'blocked').length;
    
    // Get top referrers
    const referrerCounts = {};
    joinStats.forEach(join => {
      if (join.join_status === 'completed') {
        referrerCounts[join.referrer_id] = (referrerCounts[join.referrer_id] || 0) + 1;
      }
    });
    
    const topReferrers = Object.entries(referrerCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);
    
    const statsMessage = `üìä **Referral System Statistics** üìä

üéØ **Join Statistics:**
‚Ä¢ Total Joins: ${totalJoins}
‚Ä¢ Successful: ${successfulJoins}
‚Ä¢ Pending: ${pendingJoins}
‚Ä¢ Failed: ${failedJoins}

üìà **Attempt Statistics:**
‚Ä¢ Total Attempts: ${totalAttempts}
‚Ä¢ Successful: ${successfulAttempts}
‚Ä¢ Failed: ${failedAttempts}
‚Ä¢ Blocked: ${blockedAttempts}

üèÜ **Top Referrers:**
${topReferrers.map(([id, count], index) => `${index + 1}. User ${id}: ${count} referrals`).join('\n')}

üìÖ **Last 24 Hours:**
‚Ä¢ New Joins: ${joinStats.filter(j => new Date(j.created_at) > new Date(Date.now() - 24*60*60*1000)).length}
‚Ä¢ New Attempts: ${attemptStats.filter(a => new Date(a.created_at) > new Date(Date.now() - 24*60*60*1000)).length}`;
    
    await bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
    console.log(`‚úÖ Referral statistics sent to admin ${userId}`);
    
  } catch (error) {
    console.error(`‚ùå Error in referral stats:`, error);
    await bot.sendMessage(chatId, `‚ùå Error getting referral statistics: ${error.message}`);
  }
});

// Handle all messages (ULTRA-OPTIMIZED - Fast processing with Anti-Bot protection)
bot.on('message', async (msg) => {
  // Hide left_chat_member (user left) messages in the main group
  if (msg.left_chat_member && msg.chat && msg.chat.id && msg.chat.id.toString() === GROUP_ID) {
    try {
      await bot.deleteMessage(msg.chat.id, msg.message_id);
      console.log(`üóëÔ∏è Deleted left_chat_member message for user ${msg.left_chat_member.id}`);
    } catch (error) {
      console.error('‚ùå Error deleting left_chat_member message:', error);
    }
    return; // Do not process further
  }
  // Check if this is a new chat members message (Rose bot style)
  if (msg.new_chat_members && msg.new_chat_members.length > 0) {
    const chatId = msg.chat.id;
    
    // Only process in our main group
    if (chatId.toString() !== GROUP_ID) {
      return;
    }
    
    console.log(`üëã New chat members detected:`, msg.new_chat_members.length);
    console.log(`üìù Join message text: "${msg.text || 'No text'}"`);
    console.log(`üîó Join message entities:`, JSON.stringify(msg.entities || []));
    
    // Check for referral code in the join message
    let referralCode = null;
    
    // Check different possible formats for referral codes
    if (msg.text) {
      // Format 1: ?start=REF123456_1234567890
      const startMatch = msg.text.match(/\?start=([^\s]+)/);
      if (startMatch) {
        referralCode = startMatch[1];
        console.log(`üîó Referral code detected in join message (format 1): ${referralCode}`);
      }
      
      // Format 2: /start REF123456_1234567890
      if (!referralCode) {
        const startCommandMatch = msg.text.match(/\/start\s+([^\s]+)/);
        if (startCommandMatch) {
          referralCode = startCommandMatch[1];
          console.log(`üîó Referral code detected in join message (format 2): ${referralCode}`);
        }
      }
      
      // Format 3: Check if the entire message is a referral code
      if (!referralCode && msg.text.startsWith('REF') && msg.text.includes('_')) {
        referralCode = msg.text;
        console.log(`üîó Referral code detected in join message (format 3): ${referralCode}`);
      }
      
      // Format 4: Check for URL entities that might contain referral codes
      if (!referralCode && msg.entities) {
        for (const entity of msg.entities) {
          if (entity.type === 'url' || entity.type === 'text_link') {
            const url = entity.type === 'url' ? 
              msg.text.substring(entity.offset, entity.offset + entity.length) :
              entity.url;
            
            console.log(`üîç Checking URL entity: ${url}`);
            
            // Extract referral code from URL
            const urlStartMatch = url.match(/[?&]start=([^&]+)/);
            if (urlStartMatch) {
              referralCode = urlStartMatch[1];
              console.log(`üîó Referral code detected in URL entity: ${referralCode}`);
              break;
            }
          }
        }
      }
    }
    
    for (const newMember of msg.new_chat_members) {
      // Skip if the new member is the bot itself
      if (newMember.is_bot && newMember.username === 'denemebot45bot') {
        console.log(`ü§ñ Bot joined, skipping welcome message`);
        continue;
      }
      
      // Store referral code for this user if found
      if (referralCode) {
        pendingReferrals.set(newMember.id, referralCode);
        console.log(`üìù Stored referral code ${referralCode} for user ${newMember.id}`);
      } else {
        console.log(`‚ö†Ô∏è No referral code found for user ${newMember.id}`);
      }
      
      await handleNewMember(chatId, newMember);
    }
    
    // Return early to avoid processing as regular message
    return;
  }
  
  // Only process messages from the main group
  if (msg.chat.id.toString() !== GROUP_ID) {
    return;
  }
  
  const userId = msg.from.id;
  const messageId = msg.message_id;
  const messageText = msg.text || '';
  const userDisplayName = getUserDisplayName(msg);
  
  // Create unique message identifier
  const messageKey = `${userId}_${messageId}_${msg.chat.id}`;
  
  // Quick duplicate check first (before any async operations)
  if (processedMessages.has(messageKey)) {
    console.log(`üîÑ Message already processed: ${messageKey}`);
    return; // Skip silently for performance
  }
  
  // Anti-bot protection checks - BAN CHECK FIRST (STRICT)
  if (isUserBanned(userId)) {
    console.log(`üö´ Banned user ${userDisplayName} (${userId}) tried to send message, ignoring`);
    
    // Send warning to banned user
    try {
      const userData = userMessageHistory.get(userId);
      const remainingTime = Math.ceil((userData.bannedUntil - Date.now()) / 1000);
      
      const banWarningMessage = `üö´ You are currently banned\n\n` +
        `You cannot send messages for ${remainingTime} more seconds due to rule violations.\n` +
        `Please wait and try again later.\n\n` +
        `‚ö†Ô∏è Warnings: ${userData.warnings}/${ANTI_BOT_CONFIG.WARNING_THRESHOLD}`;
      
      await sendMessageWithRateLimit(msg.chat.id, banWarningMessage);
    } catch (error) {
      console.error('Error sending ban warning to user:', error);
    }
    
    // IMPORTANT: Don't add to processedMessages, don't process further
    return;
  }
  
  // Check message rate
  const rateCheck = checkMessageRate(userId);
  if (!rateCheck.allowed) {
    console.log(`‚ö†Ô∏è Rate limit exceeded for user ${userDisplayName} (${userId}): ${rateCheck.reason}`);
    const spamResult = await handleSpamDetection(msg, userId, rateCheck.reason);
    
    if (spamResult.action === 'restrict' || spamResult.action === 'ban') {
      // Restriction/ban already handled in handleSpamDetection
      return;
    }
  }
  
  // Check for spam patterns
  if (isSpamMessage(messageText)) {
    console.log(`üö® Spam detected for user ${userDisplayName} (${userId}): "${messageText}"`);
    const spamResult = await handleSpamDetection(msg, userId, 'spam_pattern');
    
    if (spamResult.action === 'restrict' || spamResult.action === 'ban') {
      // Restriction/ban already handled in handleSpamDetection
      return;
    }
  }
  
  // Mark as processed immediately to prevent race conditions
  processedMessages.set(messageKey, true);
  
  // Performance monitoring
  messageCount++;
  totalMessagesProcessed++;
  const currentTime = Date.now();
  const timeSinceLastMessage = currentTime - lastMessageTime;
  lastMessageTime = currentTime;
  
  // Log performance every 100 messages
  if (messageCount % PERFORMANCE_LOG_INTERVAL === 0) {
    logPerformanceStats();
    console.log(`üìä Recent Performance: ${messageCount} messages processed`);
    console.log(`  - Time since last message: ${timeSinceLastMessage}ms`);
  }
  
  console.log('üì® Message received:', {
    userId,
    userDisplayName,
    messageId,
    messageKey,
    messageType: msg.photo ? 'photo' : 'text'
  });
  
  // Use optimized message processing (Discord bot style)
  await processMessageOptimized(msg, messageKey, userId, messageText, userDisplayName);
});



// Helper functions
function isHelpfulMessage(text) {
  const helpfulKeywords = [
    'help', 'how', 'what', 'where', 'when', 'why', 'guide', 'tutorial',
    'explain', 'assist', 'support', 'answer', 'question', 'problem',
    'solution', 'advice', 'tip', 'recommend', 'suggest'
  ];
  
  const lowerText = text.toLowerCase();
  return helpfulKeywords.some(keyword => lowerText.includes(keyword));
}

// Anti-bot protection functions
function isSpamMessage(text) {
  if (!text || text.length < 3) return false;
  
  // Check for suspicious patterns
  return ANTI_BOT_CONFIG.SUSPICIOUS_PATTERNS.some(pattern => pattern.test(text));
}

function isUserBanned(userId) {
  const userData = userMessageHistory.get(userId);
  if (!userData || !userData.bannedUntil) return false;
  
  const now = Date.now();
  
  if (now > userData.bannedUntil) {
    // Ban expired, remove it
    userData.bannedUntil = null;
    userData.warnings = Math.max(0, userData.warnings - 1); // Reduce warnings
    userMessageHistory.set(userId, userData);
    console.log(`‚úÖ Ban expired for user ${userId}, warnings reduced to ${userData.warnings}`);
    return false;
  }
  
  // Calculate remaining ban time
  const remainingTime = Math.ceil((userData.bannedUntil - now) / 1000);
  console.log(`üö´ User ${userId} still banned for ${remainingTime} seconds`);
  return true;
}

// Telegram ban/unban functions (Rose bot style)
async function banUser(chatId, userId, reason = 'Spam/Abuse', duration = 0) {
  try {
    console.log(`üî® Banning user ${userId} from chat ${chatId} for reason: ${reason}`);
    
    if (duration > 0) {
      // Temporary ban (until_date)
      const untilDate = Math.floor(Date.now() / 1000) + duration;
      await bot.banChatMember(chatId, userId, { until_date: untilDate });
      console.log(`‚è∞ User ${userId} temporarily banned until ${new Date(untilDate * 1000)}`);
    } else {
      // Permanent ban
      await bot.banChatMember(chatId, userId);
      console.log(`üö´ User ${userId} permanently banned`);
    }
    
    return { success: true, type: duration > 0 ? 'temporary' : 'permanent' };
  } catch (error) {
    console.error(`‚ùå Error banning user ${userId}:`, error);
    return { success: false, error: error.message };
  }
}

async function unbanUser(chatId, userId) {
  try {
    console.log(`üîì Unbanning user ${userId} from chat ${chatId}`);
    await bot.unbanChatMember(chatId, userId, { only_if_banned: true });
    console.log(`‚úÖ User ${userId} unbanned successfully`);
    return { success: true };
  } catch (error) {
    console.error(`‚ùå Error unbanning user ${userId}:`, error);
    return { success: false, error: error.message };
  }
}

async function restrictUser(chatId, userId, duration = 300) {
  try {
    console.log(`üîí Restricting user ${userId} in chat ${chatId} for ${duration} seconds`);
    
    const permissions = {
      can_send_messages: false,
      can_send_media_messages: false,
      can_send_other_messages: false,
      can_add_web_page_previews: false
    };
    
    const untilDate = Math.floor(Date.now() / 1000) + duration;
    await bot.restrictChatMember(chatId, userId, { 
      permissions: permissions,
      until_date: untilDate 
    });
    
    console.log(`üîí User ${userId} restricted until ${new Date(untilDate * 1000)}`);
    return { success: true, until_date: untilDate };
  } catch (error) {
    console.error(`‚ùå Error restricting user ${userId}:`, error);
    return { success: false, error: error.message };
  }
}

// Get user display name (username or first_name)
function getUserDisplayName(msg) {
  const username = msg.from.username;
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name;
  
  if (username) {
    return `@${username}`;
  } else if (firstName && lastName) {
    return `${firstName} ${lastName}`;
  } else if (firstName) {
    return firstName;
  } else {
    return `User${msg.from.id}`;
  }
}

function checkMessageRate(userId) {
  const now = Date.now();
  const userData = userMessageHistory.get(userId) || { messages: [], warnings: 0, bannedUntil: null };
  
  // Add current message
  userData.messages.push(now);
  
  // Remove old messages (older than 1 hour)
  userData.messages = userData.messages.filter(time => now - time < 3600000);
  
  // Check minute rate
  const messagesLastMinute = userData.messages.filter(time => now - time < 60000).length;
  if (messagesLastMinute > ANTI_BOT_CONFIG.MAX_MESSAGES_PER_MINUTE) {
    return { allowed: false, reason: 'minute_rate', count: messagesLastMinute };
  }
  
  // Check hour rate
  const messagesLastHour = userData.messages.length;
  if (messagesLastHour > ANTI_BOT_CONFIG.MAX_MESSAGES_PER_HOUR) {
    return { allowed: false, reason: 'hour_rate', count: messagesLastHour };
  }
  
  // Check minimum interval
  if (userData.messages.length > 1) {
    const lastMessageTime = userData.messages[userData.messages.length - 2];
    const interval = now - lastMessageTime;
    if (interval < ANTI_BOT_CONFIG.MIN_MESSAGE_INTERVAL) {
      return { allowed: false, reason: 'min_interval', interval };
    }
  }
  
  userMessageHistory.set(userId, userData);
  return { allowed: true };
}

async function handleSpamDetection(msg, userId, reason) {
  const userData = userMessageHistory.get(userId) || { messages: [], warnings: 0, bannedUntil: null, restrictedUntil: null };
  const spamData = spamDetections.get(userId) || { count: 0, lastDetection: null };
  const userDisplayName = getUserDisplayName(msg);
  
  const now = Date.now();
  
  // Check if this is a recent detection
  if (spamData.lastDetection && now - spamData.lastDetection < ANTI_BOT_CONFIG.SPAM_DETECTION_WINDOW) {
    spamData.count++;
  } else {
    spamData.count = 1;
  }
  
  spamData.lastDetection = now;
  spamDetections.set(userId, spamData);
  
  // Increment warnings
  userData.warnings++;
  
  // Check if user should be restricted (Rose bot style)
  if (userData.warnings >= ANTI_BOT_CONFIG.WARNING_THRESHOLD) {
    if (ANTI_BOT_CONFIG.USE_TELEGRAM_RESTRICTIONS) {
      // Use Telegram's native restriction
      const restrictResult = await restrictUser(msg.chat.id, userId, ANTI_BOT_CONFIG.RESTRICT_DURATION);
      
      if (restrictResult.success) {
        userData.restrictedUntil = restrictResult.until_date * 1000;
        userData.warnings = 0; // Reset warnings after restriction
        userMessageHistory.set(userId, userData);
        
        console.log(`üîí User ${userDisplayName} (${userId}) restricted for ${ANTI_BOT_CONFIG.RESTRICT_DURATION} seconds`);
        
        // Send restriction notification to group
        const restrictMessage = `üîí *Anti-Bot Protection*\n\n` +
          `${userDisplayName} has been restricted for ${ANTI_BOT_CONFIG.RESTRICT_DURATION} seconds due to rule violations.\n` +
          `They cannot send messages during this time.`;
        
        try {
          await sendMessageWithRateLimit(msg.chat.id, restrictMessage);
        } catch (error) {
          console.error('Error sending restriction notification:', error);
        }
        
        return { action: 'restrict', duration: ANTI_BOT_CONFIG.RESTRICT_DURATION };
      }
    } else {
      // Fallback to internal ban
      userData.bannedUntil = now + ANTI_BOT_CONFIG.BAN_DURATION;
      userMessageHistory.set(userId, userData);
      
      console.log(`üö´ User ${userDisplayName} (${userId}) banned for ${ANTI_BOT_CONFIG.BAN_DURATION/1000} seconds due to spam`);
      return { action: 'ban', duration: ANTI_BOT_CONFIG.BAN_DURATION };
    }
  }
  
  userMessageHistory.set(userId, userData);
  console.log(`‚ö†Ô∏è User ${userDisplayName} (${userId}) warning ${userData.warnings}/${ANTI_BOT_CONFIG.WARNING_THRESHOLD} - Reason: ${reason}`);
  return { action: 'warning', warnings: userData.warnings };
}

// Rate limiting functions
async function sendMessageWithRateLimit(chatId, message, options = {}) {
  return new Promise((resolve, reject) => {
    messageQueue.push({
      chatId,
      message,
      options,
      resolve,
      reject,
      timestamp: Date.now()
    });
    
    if (!isProcessingQueue) {
      processMessageQueue();
    }
  });
}

// Admin log functions
async function sendAdminLog(message, type = 'INFO') {
  try {
    // Check if admin group ID is valid (can be normal group or supergroup)
    if (!ADMIN_GROUP_ID || (!ADMIN_GROUP_ID.startsWith('-') && !ADMIN_GROUP_ID.startsWith('-100'))) {
      console.log(`‚ö†Ô∏è Invalid admin group ID: ${ADMIN_GROUP_ID}. Admin logs disabled.`);
      return;
    }
    
    const timestamp = new Date().toLocaleString('tr-TR');
    const logMessage = `üìä ${type} - ${timestamp}\n\n${message}`;
    
    await sendMessageWithRateLimit(ADMIN_GROUP_ID, logMessage);
    console.log(`üì§ Admin log sent: ${type}`);
  } catch (error) {
    console.error('‚ùå Error sending admin log:', error);
    if (error.code === 'ETELEGRAM' && error.response?.body?.description?.includes('group chat was upgraded')) {
      console.error('‚ö†Ô∏è Admin group was upgraded to supergroup. Please update ADMIN_GROUP_ID.');
      console.error('üí° Use /group_info command to get the new supergroup ID.');
    }
  }
}

async function sendAdminError(error, context = '') {
  try {
    // Check if admin group ID is valid (can be normal group or supergroup)
    if (!ADMIN_GROUP_ID || (!ADMIN_GROUP_ID.startsWith('-') && !ADMIN_GROUP_ID.startsWith('-100'))) {
      console.log(`‚ö†Ô∏è Invalid admin group ID: ${ADMIN_GROUP_ID}. Admin error logs disabled.`);
      return;
    }
    
    const timestamp = new Date().toLocaleString('tr-TR');
    const errorMessage = `üö® ERROR - ${timestamp}\n\n` +
      `Context: ${context}\n` +
      `Error: ${error.message || error}\n` +
      `Stack: ${error.stack || 'No stack trace'}`;
    
    await sendMessageWithRateLimit(ADMIN_GROUP_ID, errorMessage);
    console.log(`üì§ Admin error log sent: ${context}`);
  } catch (err) {
    console.error('‚ùå Error sending admin error log:', err);
    if (err.code === 'ETELEGRAM' && err.response?.body?.description?.includes('group chat was upgraded')) {
      console.error('‚ö†Ô∏è Admin group was upgraded to supergroup. Please update ADMIN_GROUP_ID.');
    }
  }
}

async function sendAdminStats(stats) {
  try {
    // Check if admin group ID is valid (can be normal group or supergroup)
    if (!ADMIN_GROUP_ID || (!ADMIN_GROUP_ID.startsWith('-') && !ADMIN_GROUP_ID.startsWith('-100'))) {
      console.log(`‚ö†Ô∏è Invalid admin group ID: ${ADMIN_GROUP_ID}. Admin stats disabled.`);
      return;
    }
    
    const timestamp = new Date().toLocaleString('tr-TR');
    const statsMessage = `üìà STATS - ${timestamp}\n\n` +
      `ü§ñ Bot Status: ‚úÖ Online\n` +
      `üìä Cache Size: ${stats.cacheSize} users\n` +
      `üîí Processed Messages: ${stats.processedMessages}\n` +
      `üìù Queue Size: ${stats.queueSize}\n` +
      `üë• Active Users: ${stats.activeUsers}\n` +
      `üí¨ Total Messages: ${stats.totalMessages}\n` +
      `‚≠ê Total XP Awarded: ${stats.totalXP}`;
    
    await sendMessageWithRateLimit(ADMIN_GROUP_ID, statsMessage);
  } catch (error) {
    console.error('‚ùå Error sending admin stats:', error);
    if (error.code === 'ETELEGRAM' && error.response?.body?.description?.includes('group chat was upgraded')) {
      console.error('‚ö†Ô∏è Admin group was upgraded to supergroup. Please update ADMIN_GROUP_ID.');
    }
  }
}

async function processMessageQueue() {
  if (isProcessingQueue || messageQueue.length === 0) {
    return;
  }
  
  isProcessingQueue = true;
  
  while (messageQueue.length > 0) {
    const messageData = messageQueue.shift();
    
    try {
      console.log(`üì§ Sending message to ${messageData.chatId} (Queue: ${messageQueue.length} remaining)`);
      
      const result = await bot.sendMessage(
        messageData.chatId,
        messageData.message,
        messageData.options
      );
      
      messageData.resolve(result);
      
      // Rate limiting delay
      if (messageQueue.length > 0) {
        await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY));
      }
      
    } catch (error) {
      console.error('‚ùå Error sending message:', error);
      messageData.reject(error);
      
      // If rate limited, wait longer
      if (error.code === 429) {
        console.log(`‚è≥ Rate limited, waiting ${RATE_LIMIT_RETRY_DELAY/1000} seconds...`);
        await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_RETRY_DELAY));
      }
    }
  }
  
  isProcessingQueue = false;
}

async function updateUserActivity(telegramId, updates) {
  try {
    console.log(`üîÑ Updating activity for user ${telegramId}:`, updates);
    
    // Validate input data to prevent duplicates
    if (!updates.messageCount || updates.messageCount <= 0) {
      console.log(`‚ö†Ô∏è Invalid message count for user ${telegramId}: ${updates.messageCount}`);
      return;
    }
    
    if (!updates.xpEarned || updates.xpEarned <= 0) {
      console.log(`‚ö†Ô∏è Invalid XP earned for user ${telegramId}: ${updates.xpEarned}`);
      return;
    }
    
    // Get current activity
    const { data: currentActivity, error: fetchError } = await supabase
      .from('telegram_activities')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();
    
    if (fetchError && fetchError.code !== 'PGRST116') {
      throw fetchError;
    }
    
    if (!currentActivity) {
      // Create new activity record
      const newActivity = {
        telegram_id: telegramId,
        message_count: updates.messageCount,
        total_reactions: 0,
        total_xp: updates.xpEarned,
        current_level: 1,
        last_activity: new Date().toISOString()
      };
      
      console.log('üìù Creating new activity record:', newActivity);
      
      await supabase
        .from('telegram_activities')
        .insert([newActivity]);
        
      console.log('‚úÖ New activity record created');
      
      // Check for milestones for new users
      await checkMilestones(telegramId, updates.xpEarned, updates.messageCount);
      
    } else {
      // Update existing activity
      const newTotalXP = currentActivity.total_xp + updates.xpEarned;
      const newMessageCount = currentActivity.message_count + updates.messageCount;
      const newLevel = calculateLevel(newTotalXP);
      const oldLevel = currentActivity.current_level;
      
      const updateData = {
        message_count: newMessageCount,
        total_reactions: 0, // Reactions disabled
        total_xp: newTotalXP,
        current_level: newLevel,
        last_activity: new Date().toISOString()
      };
      
      console.log('üìù Updating activity record:', {
        old: { xp: currentActivity.total_xp, messages: currentActivity.message_count, level: oldLevel },
        new: { xp: newTotalXP, messages: newMessageCount, level: newLevel },
        delta: { xp: updates.xpEarned, messages: updates.messageCount }
      });
      
      await supabase
        .from('telegram_activities')
        .update(updateData)
        .eq('telegram_id', telegramId);
        
      console.log('‚úÖ Activity record updated');
      
      // Check if user leveled up
      if (newLevel > oldLevel) {
        console.log(`üéâ User ${telegramId} leveled up from ${oldLevel} to ${newLevel}!`);
        console.log(`üìä Level up details:`, {
          telegramId,
          oldLevel,
          newLevel,
          oldXP: currentActivity.total_xp,
          newXP: newTotalXP,
          xpGained: updates.xpEarned
        });
        
        // Get user info for notification
        const { data: userInfo, error: userError } = await supabase
          .from('telegram_users')
          .select('username, first_name')
          .eq('telegram_id', telegramId)
          .single();
        
        if (!userError && userInfo) {
          const username = userInfo.username || userInfo.first_name;
          const levelName = getLevelName(newLevel);
          const oldLevelName = getLevelName(oldLevel);
          const newReward = getLevelReward(newLevel);
          
          const levelUpMessage = `üéâ **LEVEL UP!** üéâ\n\n` +
            `Congratulations @${username}! üèÜ\n\n` +
            `You've leveled up from **${oldLevelName}** to **${levelName}**!\n` +
            `‚≠ê Total XP: ${newTotalXP}\n` +
            `üí¨ Messages: ${newMessageCount}\n\n` +
            `üéÅ Daily Reward: ${newReward} Points/day`;
          // Add inline button for claiming daily rewards
          const levelUpKeyboard = {
            inline_keyboard: [[
              {
                text: 'üéÅ Claim Daily Rewards',
                url: 'https://bblip.io/social-connections'
              }
            ]]
          };
          // Send notification to group
          try {
            await sendMessageWithRateLimit(GROUP_ID, levelUpMessage, { reply_markup: levelUpKeyboard });
            console.log(`‚úÖ Level up notification sent to group for user ${telegramId}: ${oldLevelName} ‚Üí ${levelName}`);
          } catch (error) {
            console.error('‚ùå Error sending level up notification:', error);
            console.error('Error details:', JSON.stringify(error, null, 2));
          }
        } else {
          console.log(`‚ö†Ô∏è Could not get user info for level up notification: ${userError || 'No user data'}`);
        }
      }
      
      // Check for milestone achievements
      await checkMilestones(telegramId, newTotalXP, newMessageCount);
    }
  } catch (error) {
    console.error('‚ùå Error updating user activity:', error);
    throw error;
  }
}

function calculateLevel(totalXP) {
  if (totalXP >= 1001) return 5;  // Diamond
  if (totalXP >= 501) return 4;   // Platinum
  if (totalXP >= 251) return 3;   // Gold
  if (totalXP >= 101) return 2;   // Silver
  return 1;                       // Bronze
}

// Get level name by level number (1-5)
function getLevelName(level) {
  const levelNames = ['Bronze', 'Silver', 'Gold', 'Platinum', 'Diamond'];
  return levelNames[level - 1] || 'Unknown';
}

// Get level reward by level number (1-5)
function getLevelReward(level) {
  const levelRewards = [1, 3, 5, 10, 20];
  return levelRewards[level - 1] || 1;
}

// Check for milestone achievements
async function checkMilestones(telegramId, totalXP, messageCount) {
  try {
    // Get user info
    const { data: userInfo, error: userError } = await supabase
      .from('telegram_users')
      .select('username, first_name')
      .eq('telegram_id', telegramId)
      .single();
    
    if (userError || !userInfo) {
      return;
    }
    
    const username = userInfo.username || userInfo.first_name;
    let milestoneMessage = '';
    
    // XP Milestones 
    if (totalXP === 100) {
      milestoneMessage = `üéØ **100 XP Milestone!** üéØ\n\n` +
        `Congratulations @${username}! You've reached 100 XP!\n` +
        `‚≠ê Keep up the great work!`;
    } else if (totalXP === 500) {
      milestoneMessage = `üî• **500 XP Milestone!** üî•\n\n` +
        `Amazing @${username}! You've reached 500 XP!\n` + 
        `‚≠ê You're on fire!`;
    } else if (totalXP === 1000) {
      milestoneMessage = `üíé **1000 XP Milestone!** üíé\n\n` +
        `Incredible @${username}! You've reached 1000 XP!\n` +
        `‚≠ê You're a legend!`;
    }
    
    // Message Count Milestones
    if (messageCount === 50) {
      milestoneMessage = `üí¨ **50 Messages Milestone!** üí¨\n\n` +
        `Great job @${username}! You've sent 50 messages!\n` +
        `‚≠ê Keep the conversation going!`;
    } else if (messageCount === 100) {
      milestoneMessage = `üì¢ **100 Messages Milestone!** üì¢\n\n` +
        `Fantastic @${username}! You've sent 100 messages!\n` +
        `‚≠ê You're a chat champion!`;
    } else if (messageCount === 500) {
      milestoneMessage = `üó£Ô∏è **500 Messages Milestone!** üó£Ô∏è\n\n` +
        `Unbelievable @${username}! You've sent 500 messages!\n` +
        `‚≠ê You're the voice of the community!`;
    }
    
    // Send milestone notification if any
    if (milestoneMessage) {
      try {
        await sendMessageWithRateLimit(GROUP_ID, milestoneMessage);
        console.log(`‚úÖ Milestone notification sent for user ${telegramId}`);
      } catch (error) {
        console.error('‚ùå Error sending milestone notification:', error);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error checking milestones:', error);
  }
}

// Daily XP calculation job (run every day at midnight)
async function calculateDailyXP() {
  try {
    console.log('Starting daily XP calculation...');
    
    // Get all connected users
    const { data: users, error } = await supabase
      .from('telegram_users')
      .select('telegram_id')
      .eq('is_active', true);
    
    if (error) {
      console.error('Error fetching users:', error);
      return;
    }
    
    for (const user of users) {
      try {
        // Check if user was active today
        const today = new Date().toISOString().split('T')[0];
        const { data: todayMessages, error: messageError } = await supabase
          .from('telegram_messages')
          .select('id')
          .eq('telegram_id', user.telegram_id)
          .gte('created_at', today)
          .limit(1);
        
        if (messageError) {
          console.error('Error checking today messages:', messageError);
          continue;
        }
        
        if (todayMessages.length > 0) {
          // User was active today, give daily bonus
          await updateUserActivity(user.telegram_id, {
            xpEarned: XP_REWARDS.DAILY_ACTIVE
          });
          
          console.log(`Daily bonus given to user ${user.telegram_id}`);
        }
      } catch (error) {
        console.error(`Error processing user ${user.telegram_id}:`, error);
      }
    }
    
    console.log('Daily XP calculation completed');
  } catch (error) {
    console.error('Error in daily XP calculation:', error);
  }
}

// Schedule daily XP calculation (every 24 hours)
setInterval(calculateDailyXP, 24 * 60 * 60 * 1000);

// Batch processing is now handled by the optimized batchProcessor
// No need for manual setInterval - it's managed by the optimization module

// Error handling
bot.on('error', (error) => {
  console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

// Clear cache on startup to prevent duplicates from previous sessions
messageCache.clear();
processedMessages.clear();
messageQueue.length = 0;
isProcessingQueue = false;
userMessageHistory.clear();
spamDetections.clear();
console.log('üßπ Cache, queue, and anti-bot data cleared on startup');

console.log('ü§ñ Telegram bot started...');
console.log('üìä Bot Info:');
console.log('  - Bot Token:', BOT_TOKEN ? '‚úÖ Set' : '‚ùå Missing');
console.log('  - Group ID:', GROUP_ID);
console.log('  - Supabase URL:', SUPABASE_URL ? '‚úÖ Set' : '‚ùå Missing');
console.log('  - Web App URL:', WEB_APP_URL);
console.log('‚ö° Rate Limiting:');
console.log(`  - Message Delay: ${RATE_LIMIT_DELAY}ms`);
console.log(`  - Retry Delay: ${RATE_LIMIT_RETRY_DELAY}ms`);
console.log('üõ°Ô∏è Anti-Bot Protection (Rose Bot Style):');
console.log(`  - Min Message Interval: ${ANTI_BOT_CONFIG.MIN_MESSAGE_INTERVAL}ms`);
console.log(`  - Max Messages/Minute: ${ANTI_BOT_CONFIG.MAX_MESSAGES_PER_MINUTE}`);
console.log(`  - Max Messages/Hour: ${ANTI_BOT_CONFIG.MAX_MESSAGES_PER_HOUR}`);
console.log(`  - Warning Threshold: ${ANTI_BOT_CONFIG.WARNING_THRESHOLD}`);
console.log(`  - Restrict Duration: ${ANTI_BOT_CONFIG.RESTRICT_DURATION}s`);
console.log(`  - Ban Duration: ${ANTI_BOT_CONFIG.BAN_DURATION}s`);
console.log(`  - Use Telegram Restrictions: ${ANTI_BOT_CONFIG.USE_TELEGRAM_RESTRICTIONS}`);
console.log(`  - Auto Unrestrict: ${ANTI_BOT_CONFIG.AUTO_UNRESTRICT}`);
console.log('üì° Polling Settings:');
console.log(`  - Polling Interval: ${POLLING_INTERVAL}ms`);
console.log(`  - Polling Timeout: 5s (via params)`);
console.log(`  - Polling Limit: ${POLLING_LIMIT} updates`);
console.log(`  - Allowed Updates: message, new_chat_members`);
console.log('üîÑ Batch Processing:');
console.log(`  - Batch Interval: ${BATCH_INTERVAL / 1000} seconds`);
console.log('üéâ Level Up System:');
console.log('  - Real-time level detection: Instant');
console.log('  - Batch processing: Every 60 seconds');
console.log('  - Level names: Bronze, Silver, Gold, Platinum, Diamond');
console.log('  - Level rewards: 1, 3, 5, 10, 20 Points/day');


// Test bot commands function
async function testBotCommands() {
  try {
    const commands = await bot.getMyCommands();
    console.log('üìã Current bot commands:');
    commands.forEach(cmd => {
      console.log(`  - /${cmd.command}: ${cmd.description}`);
    });
  } catch (error) {
    console.error('‚ùå Error getting bot commands:', error);
  }
}

// Test level up system
async function testLevelUpSystem() {
  try {
    console.log('üß™ Testing level up system...');
    
    // Test level calculations
    const testLevels = [50, 100, 150, 300, 600, 1200];
    testLevels.forEach(xp => {
      const level = calculateLevel(xp);
      const levelName = getLevelName(level);
      const reward = getLevelReward(level);
      console.log(`  - ${xp} XP ‚Üí Level ${level} (${levelName}) ‚Üí ${reward} Points/day`);
    });
    
    console.log('‚úÖ Level up system test completed');
  } catch (error) {
    console.error('‚ùå Error testing level up system:', error);
  }
}

// Test admin group connection
async function testAdminGroup() {
  try {
    console.log('üß™ Testing admin group connection...');
    
    if (!ADMIN_GROUP_ID || (!ADMIN_GROUP_ID.startsWith('-') && !ADMIN_GROUP_ID.startsWith('-100'))) {
      console.log(`‚ö†Ô∏è Admin group ID not configured: ${ADMIN_GROUP_ID}`);
      return;
    }
    
    // Try to get chat info to verify the group exists
    const chatInfo = await bot.getChat(ADMIN_GROUP_ID);
    console.log(`‚úÖ Admin group verified: ${chatInfo.title} (${chatInfo.type})`);
    
    // Try to send a test message
    await sendAdminLog('üß™ Admin group connection test - Success!', 'TEST');
    console.log('‚úÖ Admin group test message sent');
    
  } catch (error) {
    console.error('‚ùå Admin group test failed:', error.message);
    if (error.code === 'ETELEGRAM' && error.response?.body?.description?.includes('group chat was upgraded')) {
      console.error('üí° Group was upgraded to supergroup. Use /group_info to get new ID.');
    }
  }
}

// Set bot commands for Telegram menu
async function setBotCommands() {
  try {
    // Default commands (English)
    const defaultCommands = [
      { command: 'start', description: 'üöÄ Connect your account to start earning XP' },
      { command: 'my_xp', description: 'üìä View your XP stats and current level' },
      { command: 'my_referral', description: 'üîó Get your referral link and earn rewards' },
      { command: 'leaderboard', description: 'üèÜ View top 10 users by XP' },
      { command: 'help', description: '‚ùì Show all available commands' },
      { command: 'ban', description: 'üö´ Ban a user (Admin only)' },
      { command: 'unban', description: 'üîì Unban a user (Admin only)' },
      { command: 'debug_level', description: 'üîç Debug level up system (Admin only)' },
      { command: 'admin_stats', description: 'üìä View bot statistics (Admin only)' },
      { command: 'admin_test', description: 'üß™ Test admin group connection (Admin only)' },
      { command: 'group_info', description: 'üìä Get group information (Admin only)' },
      { command: 'test_welcome', description: 'üß™ Test welcome message system (Admin only)' },
      { command: 'auto_delete', description: 'üóëÔ∏è Configure auto-delete settings (Admin only)' }
    ];
    
    // Turkish commands
    const turkishCommands = [
      { command: 'start', description: 'üöÄ Hesabƒ±nƒ±zƒ± baƒülayƒ±n ve XP kazanmaya ba≈ülayƒ±n' },
      { command: 'my_xp', description: 'üìä XP istatistiklerinizi ve seviyenizi g√∂r√ºn' },
      { command: 'leaderboard', description: 'üèÜ En iyi 10 kullanƒ±cƒ±yƒ± XP\'ye g√∂re g√∂r√ºn' },
      { command: 'help', description: '‚ùì T√ºm komutlarƒ± g√∂ster' },
      { command: 'ban', description: 'üö´ Kullanƒ±cƒ±yƒ± yasakla (Sadece Admin)' },
      { command: 'unban', description: 'üîì Kullanƒ±cƒ±nƒ±n yasaƒüƒ±nƒ± kaldƒ±r (Sadece Admin)' },
      { command: 'debug_level', description: 'üîç Seviye y√ºkselme sistemini debug et (Sadece Admin)' },
      { command: 'admin_stats', description: 'üìä Bot istatistiklerini g√∂r√ºn (Sadece Admin)' },
      { command: 'admin_test', description: 'üß™ Admin grup baƒülantƒ±sƒ±nƒ± test et (Sadece Admin)' },
      { command: 'group_info', description: 'üìä Grup bilgilerini al (Sadece Admin)' },
      { command: 'test_welcome', description: 'üß™ Welcome mesaj sistemini test et (Sadece Admin)' },
      { command: 'auto_delete', description: 'üóëÔ∏è Auto-delete ayarlarƒ±nƒ± yapƒ±landƒ±r (Sadece Admin)' }
    ];
    
    // User commands for private (default) scope
    const privateUserCommands = [
      { command: 'start', description: 'üöÄ Connect your account to start earning XP' },
      { command: 'my_xp', description: 'üìä View your XP stats and current level' },
      { command: 'my_referral', description: 'üîó Get your referral link and earn rewards' },
      { command: 'leaderboard', description: 'üèÜ View top 10 users by XP' },
      { command: 'help', description: '‚ùì Show all available commands' }
    ];
    // User commands for group scopes (no /start)
    const groupUserCommands = [
      { command: 'my_xp', description: 'üìä View your XP stats and current level' },
      { command: 'my_referral', description: 'üîó Get your referral link and earn rewards' },
      { command: 'leaderboard', description: 'üèÜ View top 10 users by XP' },
      { command: 'help', description: '‚ùì Show all available commands' }
    ];
    // Turkish user commands for private (default) scope
    const turkishPrivateUserCommands = [
      { command: 'start', description: 'üöÄ Hesabƒ±nƒ±zƒ± baƒülayƒ±n ve XP kazanmaya ba≈ülayƒ±n' },
      { command: 'my_xp', description: 'üìä XP istatistiklerinizi ve seviyenizi g√∂r√ºn' },
      { command: 'leaderboard', description: 'üèÜ En iyi 10 kullanƒ±cƒ±yƒ± XP\'ye g√∂re g√∂r√ºn' },
      { command: 'help', description: '‚ùì T√ºm komutlarƒ± g√∂ster' }
    ];
    // Turkish user commands for group scopes (no /start)
    const turkishGroupUserCommands = [
      { command: 'my_xp', description: 'üìä XP istatistiklerinizi ve seviyenizi g√∂r√ºn' },
      { command: 'leaderboard', description: 'üèÜ En iyi 10 kullanƒ±cƒ±yƒ± XP\'ye g√∂re g√∂r√ºn' },
      { command: 'help', description: '‚ùì T√ºm komutlarƒ± g√∂ster' }
    ];
    
    // Admin commands (English)
    const adminCommands = [
      { command: 'ban', description: 'üö´ Ban a user (Admin only)' },
      { command: 'unban', description: 'üîì Unban a user (Admin only)' },
      { command: 'debug_level', description: 'üîç Debug level up system (Admin only)' },
      { command: 'admin_stats', description: 'üìä View bot statistics (Admin only)' },
      { command: 'admin_test', description: 'üß™ Test admin group connection (Admin only)' },
      { command: 'group_info', description: 'üìä Get group information (Admin only)' },
      { command: 'test_welcome', description: 'üß™ Test welcome message system (Admin only)' },
      { command: 'auto_delete', description: 'üóëÔ∏è Configure auto-delete settings (Admin only)' }
    ];
    
    // Turkish admin commands
    const turkishAdminCommands = [
      { command: 'ban', description: 'üö´ Kullanƒ±cƒ±yƒ± yasakla (Sadece Admin)' },
      { command: 'unban', description: 'üîì Kullanƒ±cƒ±nƒ±n yasaƒüƒ±nƒ± kaldƒ±r (Sadece Admin)' },
      { command: 'debug_level', description: 'üîç Seviye y√ºkselme sistemini debug et (Sadece Admin)' },
      { command: 'admin_stats', description: 'üìä Bot istatistiklerini g√∂r√ºn (Sadece Admin)' },
      { command: 'admin_test', description: 'üß™ Admin grup baƒülantƒ±sƒ±nƒ± test et (Sadece Admin)' },
      { command: 'group_info', description: 'üìä Grup bilgilerini al (Sadece Admin)' },
      { command: 'test_welcome', description: 'üß™ Welcome mesaj sistemini test et (Sadece Admin)' },
      { command: 'auto_delete', description: 'üóëÔ∏è Auto-delete ayarlarƒ±nƒ± yapƒ±landƒ±r (Sadece Admin)' }
    ];
    // Set private (default) commands
    await bot.setMyCommands(privateUserCommands);
    await bot.setMyCommands(turkishPrivateUserCommands, { scope: { type: 'all_private_chats' }, language_code: 'tr' });
    // Set group commands (no /start)
    await bot.setMyCommands(groupUserCommands, { scope: { type: 'chat', chat_id: GROUP_ID } });
    await bot.setMyCommands([...groupUserCommands, ...adminCommands], { scope: { type: 'chat_administrators', chat_id: GROUP_ID } });
    await bot.setMyCommands(turkishGroupUserCommands, { scope: { type: 'chat', chat_id: GROUP_ID }, language_code: 'tr' });
    await bot.setMyCommands([...turkishGroupUserCommands, ...turkishAdminCommands], { scope: { type: 'chat_administrators', chat_id: GROUP_ID }, language_code: 'tr' });
    
    // Set default commands
    await bot.setMyCommands(defaultCommands);
    console.log('‚úÖ Default bot commands set successfully');
    
    // Set Turkish commands
    await bot.setMyCommands(turkishCommands, { scope: { type: 'all_private_chats' }, language_code: 'tr' });
    console.log('‚úÖ Turkish bot commands set successfully');
    
    // Set commands for specific group
    await bot.setMyCommands(defaultCommands, { scope: { type: 'chat', chat_id: GROUP_ID } });
    console.log(`‚úÖ Bot commands set for group ${GROUP_ID}`);
    
    // Set Turkish commands for group 
    await bot.setMyCommands(turkishCommands, { scope: { type: 'chat', chat_id: GROUP_ID }, language_code: 'tr' });
    console.log(`‚úÖ Turkish bot commands set for group ${GROUP_ID}`);
    
  } catch (error) {
    console.error('‚ùå Error setting bot commands:', error);
  }
}

// Start bot with optimized polling
bot.startPolling().then(async () => {
  console.log('‚úÖ Bot polling started successfully');
  
  // Set bot commands after polling starts
  await setBotCommands();
  
  // Send startup notification to admin group
  if (ADMIN_GROUP_ID && (ADMIN_GROUP_ID.startsWith('-') || ADMIN_GROUP_ID.startsWith('-100'))) {
    try {
      await sendAdminLog(
        `üöÄ Bot Started Successfully\n\n` +
        `ü§ñ Bot Token: ${BOT_TOKEN ? '‚úÖ Set' : '‚ùå Missing'}\n` +
        `üìä Supabase: ${SUPABASE_URL ? '‚úÖ Connected' : '‚ùå Error'}\n` +
        `üë• Main Group: ${GROUP_ID}\n` +
        `üîß Admin Group: ${ADMIN_GROUP_ID}\n` +
        `üåê Web App: ${WEB_APP_URL}\n\n` +
        `‚ö° Real-time level detection: Enabled\n` +
        `üîÑ Batch processing: Every 60 seconds\n` +
        `üõ°Ô∏è Anti-bot protection: Active\n` +
        `üì° Polling: ${POLLING_INTERVAL}ms interval, 5s timeout\n` +
        `üëã Welcome messages: Enabled (new_chat_members events)\n` +
        `üóëÔ∏è Auto-delete: ${WELCOME_MESSAGE_DELETE_ENABLED ? 'Enabled' : 'Disabled'} (${WELCOME_MESSAGE_DELETE_DELAY/1000}s)\n` +
        `üì± Private connection messages: Enabled\n` +
        `üîó Referral system: ${REFERRAL_SYSTEM_ENABLED ? 'Enabled' : 'Disabled'} (+${REFERRAL_XP_REWARD} XP, +${REFERRAL_BBLP_REWARD} Points) - Bot first, then group`,
        'STARTUP'
      );
      console.log(`‚úÖ Admin startup notification sent to group ${ADMIN_GROUP_ID}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Could not send admin startup notification: ${error.message}`);
      console.log(`üìù Admin logs may be disabled. Use /admin_test to check.`);
    }
  } else {
    console.log(`‚ö†Ô∏è Admin group ID not configured or invalid: ${ADMIN_GROUP_ID}`);
    console.log(`üìù Admin logs will be disabled. Set TELEGRAM_ADMIN_GROUP_ID to enable.`);
  }
  
  // Test bot commands and level up system
  setTimeout(async () => {
    await testBotCommands();
    await testLevelUpSystem();
    await testAdminGroup();
  }, 2000); // Wait 2 seconds for commands to be set
  
}).catch((error) => {
  console.error('‚ùå Error starting bot polling:', error);
  sendAdminError(error, 'Bot startup');
});

console.log('üîç Waiting for messages and member joins...');
console.log('üìã Bot Commands:');
console.log('  - /start - Connect account');
console.log('  - /my_xp - View XP stats');
console.log('  - /leaderboard - View top users');
console.log('  - /help - Show all commands');
console.log('  - /ban - Ban user (Admin)');
console.log('  - /unban - Unban user (Admin)');
console.log('  - /debug_level - Debug level system (Admin)');
console.log('  - /admin_stats - View bot statistics (Admin)');
console.log('  - /admin_test - Test admin group (Admin)');
console.log('  - /group_info - Get group information (Admin)');
console.log('  - /admin_log <message> - Send log to admin group (Admin)');
console.log('  - /test_welcome - Test welcome message system (Admin)');
console.log('üëã Auto Welcome: Enabled for new/returning members');
console.log(`üóëÔ∏è Auto-delete: ${WELCOME_MESSAGE_DELETE_ENABLED ? 'Enabled' : 'Disabled'} (${WELCOME_MESSAGE_DELETE_DELAY/1000}s)`);
console.log('üì± Private connection messages: Enabled for unconnected users');
console.log(`üîó Referral system: ${REFERRAL_SYSTEM_ENABLED ? 'Enabled' : 'Disabled'} (+${REFERRAL_XP_REWARD} XP, +${REFERRAL_BBLP_REWARD} Points per referral) - Bot first, then group`);

// Yeni anti-spam ve XP kontrol√º
global.userSpamData = global.userSpamData || new Map(); // telegramId -> { lastMessage: '', warnings: 0, messageTimestamps: [] }

async function handleAntiSpamAndXP(msg) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  const now = Date.now();
  let spamData = global.userSpamData.get(userId) || { lastMessage: '', warnings: 0, messageTimestamps: [] };
  // 1 dakikalƒ±k mesaj zaman damgalarƒ±nƒ± g√ºncelle
  spamData.messageTimestamps = spamData.messageTimestamps.filter(ts => now - ts < 60000);
  spamData.messageTimestamps.push(now);

  // Spam limiti kontrol√º
  if (spamData.messageTimestamps.length > 10) {
    spamData.warnings++;
    let timeoutDuration = 5 * 60; // 5 dakika (saniye)
    if (spamData.warnings === 2) timeoutDuration = 30 * 60; // 30 dakika
    if (spamData.warnings >= 3) timeoutDuration = 24 * 60 * 60; // 24 saat
    try {
      await bot.restrictChatMember(chatId, userId, { until_date: Math.floor(Date.now()/1000) + timeoutDuration });
      await bot.sendMessage(chatId, `‚ö†Ô∏è <a href="tg://user?id=${userId}">Kullanƒ±cƒ±</a> spam nedeniyle ${Math.floor(timeoutDuration/60)} dakika susturuldu. (Uyarƒ±: ${spamData.warnings})`, { parse_mode: 'HTML' });
    } catch (error) { console.error('Timeout error:', error); }
    global.userSpamData.set(userId, spamData);
    return false;
  }

  // Aynƒ± mesajƒ± tekrar atma kontrol√º
  if (msg.text === spamData.lastMessage) {
    await bot.sendMessage(chatId, `‚ö†Ô∏è Aynƒ± mesajƒ± tekrar atƒ±yorsun, XP kazanamazsƒ±n!`, { reply_to_message_id: msg.message_id });
    spamData.lastMessage = msg.text;
    global.userSpamData.set(userId, spamData);
    return false;
  }

  // 10 karakterden kƒ±sa mesajlara XP verme
  if (!msg.text || msg.text.length < 10) {
    global.userSpamData.set(userId, spamData);
    return false;
  }

  // XP ver ve son mesajƒ± g√ºncelle
  spamData.lastMessage = msg.text;
  global.userSpamData.set(userId, spamData);
  return true;
}

module.exports = bot; 